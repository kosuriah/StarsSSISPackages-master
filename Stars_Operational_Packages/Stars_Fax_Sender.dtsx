<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/5/2015 11:06:06 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LT-J6QQN12-0112"
  DTS:CreatorName="PHARMMD\saideswar.thondapu"
  DTS:DTSID="{9395BB36-B688-4E2B-AFC3-EF53C12BA222}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="1033"
  DTS:ObjectName="Stars_Fax_Sender"
  DTS:PackageType="5"
  DTS:VersionBuild="230"
  DTS:VersionGUID="{EAA08D55-2063-4427-8EF2-8988CADCAF1B}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{180320AF-27D4-4FB7-816E-5A38C3C573EE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varFileName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Get and Send Fax to Faximinion"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{FDF5415F-4560-48C3-A3C3-54871849E2D4}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get and Send Fax to Faximinion"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Get all Fax file Information"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">Select dcfl.[DTP_CNSLD_Fax_ID]
     , dcfl.[NPI]
     , [ReceiverFaxNum]
     , [SenderFaxNum]
     , [FileName]
     , dcfl.[Campaign_Date]
     , [LastStatus]
  From [dbo].[DTP_CNSLD_Fax_List] dcfl
 where dcfl.[Campaign_Date] = (Select max([Campaign_Date]) From [dbo].[DTP_CNSLD_Fax_List])
   and [LastStatus] in ('New','NotVerified','SentBefore')</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Connections[OleDbConnection]"
                  connectionManagerID="{6311C9A2-D389-4B9C-B757-1A615A452B59}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Stars_Call_Lists]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[ReceiverFaxNum]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[ReceiverFaxNum]"
                      length="20"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[ReceiverFaxNum]"
                      name="ReceiverFaxNum"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[SenderFaxNum]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[SenderFaxNum]"
                      length="20"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[SenderFaxNum]"
                      name="SenderFaxNum"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[FileName]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[FileName]"
                      length="50"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[FileName]"
                      name="FileName"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[DTP_CNSLD_Fax_ID]"
                      dataType="i8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[DTP_CNSLD_Fax_ID]"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[DTP_CNSLD_Fax_ID]"
                      name="DTP_CNSLD_Fax_ID"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[NPI]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[NPI]"
                      length="25"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[NPI]"
                      name="NPI"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[Campaign_Date]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[Campaign_Date]"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[Campaign_Date]"
                      name="Campaign_Date"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[LastStatus]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[LastStatus]"
                      length="20"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[LastStatus]"
                      name="LastStatus"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[ReceiverFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="ReceiverFaxNum" />
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[SenderFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="SenderFaxNum" />
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[FileName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="FileName" />
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[DTP_CNSLD_Fax_ID]"
                      dataType="i8"
                      name="DTP_CNSLD_Fax_ID" />
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[NPI]"
                      codePage="1252"
                      dataType="str"
                      length="25"
                      name="NPI" />
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[Campaign_Date]"
                      dataType="dbDate"
                      name="Campaign_Date" />
                    <externalMetadataColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[LastStatus]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="LastStatus" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[DTP_CNSLD_Fax_ID]"
                      dataType="i8"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[DTP_CNSLD_Fax_ID]"
                      name="DTP_CNSLD_Fax_ID" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[NPI]"
                      codePage="1252"
                      dataType="str"
                      length="25"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[NPI]"
                      name="NPI" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ReceiverFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ReceiverFaxNum]"
                      name="ReceiverFaxNum" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[SenderFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[SenderFaxNum]"
                      name="SenderFaxNum" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[FileName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[FileName]"
                      name="FileName" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[Campaign_Date]"
                      dataType="dbDate"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[Campaign_Date]"
                      name="Campaign_Date" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[LastStatus]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[LastStatus]"
                      name="LastStatus" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Send fax file to Faximinion"
              validateExternalMetadata="False"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="33">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections.Specialized;
using System.IO;
using Phaxio;
using System.Data.SqlClient;


#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection); 
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion


    IDTSConnectionManager100 connMgr;
    SqlConnection sqlConn;
    SqlCommand sqlCmd;
    SqlParameter sqlParam;

    public override void AcquireConnections(object Transaction)
    {
        connMgr = this.Connections.StarsCallListado;
        sqlConn = (SqlConnection)connMgr.AcquireConnection(null);
    }

    public override void ReleaseConnections()
    {
        connMgr.ReleaseConnection(sqlConn);
    }

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
        string updateQuery = "update [dbo].[DTP_CNSLD_Fax_List] set  [FaxSendInd] = @FaxSendInd, FaxSendDate = getdate(), [LastStatus]= @LastStatus, [ResponseMessage]= @ResponseMessage, " +
                             "ErrorCode = @ErrorCode, ErrorType = @ErrorType where [DTP_CNSLD_Fax_ID] = @DTP_CNSLD_Fax_ID";
        sqlCmd = new SqlCommand(updateQuery, sqlConn);

        sqlParam = new SqlParameter("@DTP_CNSLD_Fax_ID", SqlDbType.BigInt);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@FaxSendInd", SqlDbType.Char, 1);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@LastStatus", SqlDbType.VarChar, 20);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@ResponseMessage", SqlDbType.VarChar, 1000);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@ErrorCode", SqlDbType.VarChar, 2000);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@ErrorType", SqlDbType.VarChar, 1000);
        sqlCmd.Parameters.Add(sqlParam);

    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        System.Net.ServicePointManager.SecurityProtocol =
                System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;

        //Prod
        // string FaximinionAddress = "https://faximinion.pharmmd.com/faxes/transmit";
        string FaximinionAddress = Variables.FaximinionTransmitAddress;
        // string FaximinionAPIKey = "b773fa77efbbfb9f";
        string FaximinionAPIKey = Variables.FaximinionAPIKey;

        //Test
        //string FaximinionAddress = "https://faximinionstaging.pharmmd.com/faxes/transmit";
        //string FaximinionAPIKey = "e4d605934e4c5733e9ef";

        //Prod

        // string SourceFolderPath = @"\\p10prdsde003.pharmmd.local\Stars\FaxSend\"; // This is SQLSTARS where process created all files
        string SourceFolderPath = Variables.FaxSendPath;

        // string ArchiveFolderPath = @"\\10.5.4.113\General\Stars\HRMLetters\PDFLetters\Archive\"; // this is Z drive path(Z:\)
        string ArchiveFolderPath = Variables.FaxArchivePath;

        // string ErrorFolderPath = @"\\10.5.4.113\General\Stars\HRMLetters\PDFLetters\Error\"; // this is Z drive path(Z:\)
        string ErrorFolderPath = Variables.FaxErrorPath;

        // string NotVerifiedFolderPath = @"\\10.5.4.113\General\Stars\HRMLetters\PDFLetters\NotVerified\"; // this is Z drive path(Z:\)
        string NotVerifiedFolderPath = Variables.FaxNotVerifiedPath;

        //Dev
        //string SourceFolderPath = @"W:\Stars\FaxSend\";
        //string ArchiveFolderPath = @"W:\Stars\Fax\Archive\";
        //string ErrorFolderPath = @"W:\Stars\Fax\Error\";
        //Local
        //string SourceFolderPath = @"C:\Stars\FaxSend\";
        //string ArchiveFolderPath = @"C:\Stars\Fax\Archive\";
        //string ErrorFolderPath = @"C:\Stars\Fax\Error\";

        try
        {
            string LastStatus = Row.LastStatus;
            string Filename = Row.FileName + ".pdf";
            string SourceFilePath = SourceFolderPath + Filename;
            string FileCreateDate = Row.CampaignDate.ToString("MM-dd-yyyy");
            string DestinationFolderPath = ArchiveFolderPath + @"\" + FileCreateDate;

            NameValueCollection FaxParameters = new NameValueCollection()
                            {
                                { "fax[from_number]", Row.SenderFaxNum},
                                { "fax[to_number]", Row.ReceiverFaxNum },
                                { "fax[client_id]", Row.DTPCNSLDFaxID.ToString() },
                                { "fax[filename]", SourceFilePath },
                                {"callback_url", "http://test.local/callback"},
                                { "api_key", FaximinionAPIKey},
                                { "format", "json" }
                            };

            if (LastStatus == "SentBefore")
            {
                string DestinationFilePath = DestinationFolderPath + @"\" + Filename;

                if (!Directory.Exists(DestinationFolderPath))
                    Directory.CreateDirectory(DestinationFolderPath);
                if (File.Exists(DestinationFilePath))
                    File.Delete(DestinationFilePath);

                File.Move(SourceFilePath, DestinationFilePath);
            }
            if (LastStatus == "NotVerified")
            {
                string DestinationFilePath = NotVerifiedFolderPath + @"\" + FileCreateDate + @"\" + Filename;

                if (!Directory.Exists(DestinationFolderPath))
                    Directory.CreateDirectory(DestinationFolderPath);
                if (File.Exists(DestinationFilePath))
                    File.Delete(DestinationFilePath);

                File.Move(SourceFilePath, DestinationFilePath);
            }
            else
            {
                PhaxioOperationResult ValidationPhaxioResult = ValidationProcess(FaxParameters);
                if (!ValidationPhaxioResult.Success)
                {
                    DestinationFolderPath = ErrorFolderPath + @"\" + FileCreateDate;
                    ValidationAndArchiveFile(ValidationPhaxioResult, SourceFilePath, DestinationFolderPath, Row.DTPCNSLDFaxID, DestinationFolderPath + @"\" + Filename);
                }
                else
                {
                    PhaxioAPI objPhaxioAPI = new PhaxioAPI();
                    PhaxioOperationResult PhaxioResult = objPhaxioAPI.sendFax(FaximinionAddress, FaxParameters);
                    if (PhaxioResult.Success)
                        UpdateStatusandArchiveFile(PhaxioResult, SourceFilePath, DestinationFolderPath, Row.DTPCNSLDFaxID, DestinationFolderPath + @"\" + Filename);
                    else
                        UpdateRetryStatus(PhaxioResult, Row.DTPCNSLDFaxID);
                }
            }
        }
        catch (Exception ex)
        {
            //SaveandArchiveFile(new PhaxioOperationResult(false, ex.ToString()), SourceFolderPath + FileName, DestinationFolderPath, Row.FaxKey);
            ex.ToString();
        }
    }

    public PhaxioOperationResult ValidationProcess(NameValueCollection parameters)
    {
        if ((parameters["fax[to_number]"] == null) || (parameters["fax[to_number]"].Length == 0))
            return new PhaxioOperationResult(false, "You must include a to fax number number.");

        Regex regex = new Regex("[^0-9]");
        string ToFaxNum = regex.Replace(parameters["fax[to_number]"], String.Empty);
        if (!(ToFaxNum.Length == 10 || ToFaxNum.Length == 11))
            return new PhaxioOperationResult(false, "To fax number is not valid");

        //Accepts only 10 digits, no more no less
        //Regex pattern = new Regex(@"(?<!\d)\d{10}(?!\d)");
        //if (!pattern.IsMatch(parameters["fax[to_number]"]))
        //    return new PhaxioOperationResult(false, "To fax number is not valid");

        if (parameters["fax[filename]"] == null && (parameters["fax[filename]"].Length == 0))
            return new PhaxioOperationResult(false, "You must include a file.");

        if (parameters["fax[filename]"] != null)
            if (!File.Exists(parameters["fax[filename]"]))
            {
                return new PhaxioOperationResult(false, System.String.Format("The file '{0}' does not exist.", parameters["fax[filename]"]));
            }

        return new PhaxioOperationResult(true, "Validation is successful");
    }

    public void ValidationAndArchiveFile(PhaxioOperationResult PhaxioResult, string SourceFilePath, string DestinationFolderPath, long DTPCNSLDFaxID, string DestinationFilePath)
    {
        string faxStatus = "failure";
        string faxSendInd = "N";

        sqlCmd.Parameters["@DTP_CNSLD_Fax_ID"].Value = DTPCNSLDFaxID;
        sqlCmd.Parameters["@FaxSendInd"].Value = faxSendInd;
        sqlCmd.Parameters["@LastStatus"].Value = faxStatus;
        sqlCmd.Parameters["@ResponseMessage"].Value = PhaxioResult.Message;
        sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Message;
        sqlCmd.Parameters["@ErrorType"].Value = "Validation failed";

        sqlCmd.ExecuteNonQuery();

        if (!Directory.Exists(DestinationFolderPath))
            Directory.CreateDirectory(DestinationFolderPath);
        if (File.Exists(DestinationFilePath))
            File.Delete(DestinationFilePath);
        File.Move(SourceFilePath, DestinationFilePath);
    }

    public void UpdateStatusandArchiveFile(PhaxioOperationResult PhaxioResult, string SourceFilePath, string DestinationFolderPath, long DTPCNSLDFaxID, string DestinationFilePath)
    {

        sqlCmd.Parameters["@DTP_CNSLD_Fax_ID"].Value = DTPCNSLDFaxID;
        sqlCmd.Parameters["@FaxSendInd"].Value = "Y";
        sqlCmd.Parameters["@LastStatus"].Value = PhaxioResult.Data["status"].ToString() == string.Empty ? DBNull.Value : PhaxioResult.Data["status"];
        sqlCmd.Parameters["@ResponseMessage"].Value = PhaxioResult.Message;
        sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Data["error_code"].ToString() == string.Empty ? DBNull.Value : PhaxioResult.Data["error_code"];
        sqlCmd.Parameters["@ErrorType"].Value = PhaxioResult.Data["error_type"].ToString() == string.Empty ? DBNull.Value : PhaxioResult.Data["error_type"];

        sqlCmd.ExecuteNonQuery();

        if (!Directory.Exists(DestinationFolderPath))
            Directory.CreateDirectory(DestinationFolderPath);
        if (File.Exists(DestinationFilePath))
            File.Delete(DestinationFilePath);
        File.Move(SourceFilePath, DestinationFilePath);

    }

    public void UpdateRetryStatus(PhaxioOperationResult PhaxioResult, long DTPCNSLDFaxID)
    {
        string faxStatus = "Retry";
        string faxSendInd = "N";

        sqlCmd.Parameters["@DTP_CNSLD_Fax_ID"].Value = DTPCNSLDFaxID;
        sqlCmd.Parameters["@FaxSendInd"].Value = faxSendInd;
        sqlCmd.Parameters["@LastStatus"].Value = faxStatus;
        sqlCmd.Parameters["@ResponseMessage"].Value = "An error has occurred while uploading a fax document via the faximinion API.";
        
        if (PhaxioResult.Message.Length > 2000)
        {
            sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Message.Substring(1, 2000);
        }
        else
        {
            sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Message;
        }

        sqlCmd.Parameters["@ErrorType"].Value = "An error has occurred while uploading a fax document via the faximinion API.";


        sqlCmd.ExecuteNonQuery();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9a5698b569d546cb8e212af1c399891a.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{305B8FB3-AF96-4437-9C10-B71D1A50EC0E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_9a5698b569d546cb8e212af1c399891a</RootNamespace>
    <AssemblyName>SC_9a5698b569d546cb8e212af1c399891a</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="PhaxioAPI.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 StarsCallListado
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Stars_Call_List_ado").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String FaxArchivePath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxArchivePath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaxErrorPath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxErrorPath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaximinionAPIKey
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaximinionAPIKey"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaximinionGetAddress
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaximinionGetAddress"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaximinionTransmitAddress
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaximinionTransmitAddress"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaxNotVerifiedPath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxNotVerifiedPath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaxSendPath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxSendPath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Settings.get_Default():SC_9a5698b569d546cb8e212af1c399891a.Properties.Sett" +
    "ings")]

namespace SC_9a5698b569d546cb8e212af1c399891a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String ReceiverFaxNum
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool ReceiverFaxNum_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String SenderFaxNum
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool SenderFaxNum_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String FileName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool FileName_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public Int64 DTPCNSLDFaxID
    {
        get
        {
            return Buffer.GetInt64(BufferColumnIndexes[3]);
        }
    }
    public bool DTPCNSLDFaxID_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String NPI
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool NPI_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public DateTime CampaignDate
    {
        get
        {
            return Buffer.GetDate(BufferColumnIndexes[5]);
        }
    }
    public bool CampaignDate_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public String LastStatus
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
    }
    public bool LastStatus_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_9a5698b569d546cb8e212af1c399891a</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_9a5698b569d546cb8e212af1c399891a</msb:DisplayName>
    <msb:ProjectId>{37A37B4A-D726-498B-B3F7-ED597B7C1FBF}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_9a5698b569d546cb8e212af1c399891a.csproj" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="PhaxioAPI.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_9a5698b569d546cb8e212af1c399891a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_9a5698b569d546cb8e212af1c399891a")]
[assembly: AssemblyCopyright("Copyright @  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[PhaxioAPI.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Web.Script.Serialization;
//using System.Dynamic;
//using System.Collections.ObjectModel;
using Microsoft.CSharp.RuntimeBinder;

namespace Phaxio
{
    public class PhaxioAPI
    {
        private bool debug = false;
        private string api_key;
        private string api_secret;
        private string host;

        public PhaxioAPI() { }

        public PhaxioAPI(string apiKey, string apiSecret, string hostURL = "https://api.phaxio.com/v1/")
        {
            api_key = apiKey;
            api_secret = apiSecret;
            host = hostURL;
        }

        public PhaxioOperationResult faxStatus(int faxId)
        {
            if (faxId == 0)
                return new PhaxioOperationResult(false, "A valid fax id is required.");
            NameValueCollection parameters = new NameValueCollection();
            parameters.Add("id", faxId.ToString());
            return doRequest(host + "faxStatus", parameters);
        }

        public PhaxioOperationResult sendFax(string address, NameValueCollection parameters)
        {
            //if ((parameters["fax[to_number]"] == null) || (parameters["fax[to_number]"].Length == 0))
            //    return new PhaxioOperationResult(false, "You must include a 'to fax number' number.");

            //if (parameters["fax[filename]"] == null && (parameters["fax[filename]"].Length == 0))
            //    return new PhaxioOperationResult(false, "You must include a file.");

            //if (parameters["fax[filename]"] != null)
            //    if (!File.Exists(parameters["fax[filename]"]))
            //    {
            //        return new PhaxioOperationResult(false, System.String.Format("The file '{0}' does not exist.", parameters["fax[filename]"]));
            //    }

            return doRequest(address, parameters); //Changed
        }

        //public PhaxioOperationResult sendFax(string[] to, string[] filenames, Dictionary<string, string> options)
        //{
        //    if ((to == null) || (to.Length == 0))
        //        return new PhaxioOperationResult(false, "You must include a 'to' number.");

        //    if (filenames == null && !options.ContainsKey("string_data"))
        //        return new PhaxioOperationResult(false, "You must include a file.");

        //    NameValueCollection parameters = new NameValueCollection();

        //    for (int i = 0; i < to.Length; i++)
        //    {
        //        parameters.Add(System.String.Format("to[{0}]", i), to[i]);
        //    }
        //    if (filenames != null)
        //        for (int i = 0; i < filenames.Length; i++)
        //        {
        //            if (!File.Exists(@filenames[i]))
        //            {
        //                return new PhaxioOperationResult(false, System.String.Format("The file '{0}' does not exist.", filenames[i]));
        //            }
        //            parameters.Add(System.String.Format("filename[{0}]", i), filenames[i]);
        //        }
        //    string[] validOptionNames = new string[]{
        //        "string_data",
        //        "string_data_type",
        //        "batch",
        //        "batch_delay",
        //        "batch_collision!avoidance",
        //        "callback_url",
        //        "cancel_timeout",
        //        "caller_id"};
        //    copyValidOptionsToParameters(validOptionNames, options, parameters);

        //    return doRequest(host, parameters); //Changed
        //}

        //public PhaxioOperationResult fireBatch(int batchId){
        //    if(batchId==0)
        //        return new PhaxioOperationResult(false, "You need to include a batch Id.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("id",batchId.ToString());
        //    return doRequest(host+"fireBatch",parameters);
        //}

        //public PhaxioOperationResult closeBatch(int batchId){
        //    if(batchId==0)
        //        return new PhaxioOperationResult(false, "You need to include a batch Id.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("id",batchId.ToString());
        //    return doRequest(host+"closeBatch",parameters);
        //}

        //public string getApiKey()
        //{
        //    return api_key;
        //}

        //public string getApiSecret()
        //{
        //    return api_secret;
        //}

        //public PhaxioOperationResult provisionNumber(int areaCode, string callbackURL = "")
        //{
        //    if (areaCode == 0)
        //        return new PhaxioOperationResult(false, "Area Code is required.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("area_code", areaCode.ToString());
        //    if (callbackURL != "")
        //    {
        //        parameters.Add("callback_url", callbackURL);
        //    }
        //    return doRequest(host + "provisionNumber", parameters);
        //}

        //public PhaxioOperationResult releaseNumber(string number)
        //{
        //    if (number == "")
        //    {
        //        return new PhaxioOperationResult(false, "A fax number is required.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("number", number);
        //    return doRequest(host + "releaseNumber", parameters);
        //}

        //public PhaxioOperationResult numberList(Dictionary<string, string> options = null)
        //{
        //    NameValueCollection parameters = new NameValueCollection();
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "area_code", "number" }, options, parameters);
        //    }
        //    return doRequest(host + "numberList", parameters);
        //}

        //public PhaxioOperationResult accountStatus()
        //{
        //    NameValueCollection parameters = new NameValueCollection();
        //    return doRequest(host + "accountStatus", parameters);
        //}

        //public PhaxioOperationResult testReceive(string filename, Dictionary<string, string> options = null)
        //{
        //    if (filename == null || filename == "" || !File.Exists(@filename) || Path.GetExtension(filename) != ".pdf")
        //    {
        //        return new PhaxioOperationResult(false, "You must specify a valid pdf file.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("filename", filename);
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "from_number", "to_number" }, options, parameters);
        //    }
        //    return doRequest(host + "testReceive", parameters);
        //}

        //public PhaxioOperationResult attachPhaxCode(float x, float y, string filename, Dictionary<string, string> options = null)
        //{
        //    if (filename == null || filename == "" || !File.Exists(@filename) || Path.GetExtension(filename) != ".pdf")
        //    {
        //        return new PhaxioOperationResult(false, "You must specify a valid pdf file.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("filename", filename);
        //    parameters.Add("x", x.ToString());
        //    parameters.Add("y", y.ToString());
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "metadata", "page_number" }, options, parameters);
        //    }
        //    return doRequest(host + "attachPhaxCodeToPdf", parameters);
        //}

        //public PhaxioOperationResult createPhaxCode(Dictionary<string, string> options = null)
        //{
        //    NameValueCollection parameters = new NameValueCollection();
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "metadata", "redirect" }, options, parameters);
        //    }
        //    return doRequest(host + "createPhaxCode", parameters);
        //}

        //public PhaxioOperationResult getHostedDocument(string name, string metadata = null)
        //{
        //    if (name == null || name == "")
        //    {
        //        return new PhaxioOperationResult(false, "You must include a document name.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    if (metadata != null || metadata != "")
        //    {
        //        parameters.Add("metadata", metadata);
        //    }
        //    return doRequest(host + "getHostedDocument", parameters);
        //}

        //public PhaxioOperationResult faxFile(int id, string type = "p")
        //{
        //    if (id == 0)
        //    {
        //        return new PhaxioOperationResult(false, "A fax id is required.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("id", id.ToString());
        //    parameters.Add("type", type);
        //    return doRequest(host + "faxFile", parameters);
        //}

        //public PhaxioOperationResult faxList(string start, string end, Dictionary<string, string> options = null)
        //{
        //    if (start == null || start == "" || end == "" || end == null)
        //        return new PhaxioOperationResult(false, "Start and end timestamps are required.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("start", start);
        //    parameters.Add("end", end);
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "page", "max_per_page" }, options, parameters);
        //    }
        //    return doRequest(host + "faxList", parameters);
        //}

        private PhaxioOperationResult doRequest(string address, NameValueCollection parameters)
        {
            //parameters.Add("api_key", api_key);
            //parameters.Add("api_secret", api_secret);
            //if (debug)
            //    Console.WriteLine("Request address: \n\n {0}?{1}", address, ToString(parameters));

            var response = createAndSendRequest(address, parameters);
            if (!response.Success)
            {
                //if (debug)
                //    Console.WriteLine("Failed in createAndSendRequest: \n\n{0}\n\n", response.Message);

                return response;
            }

            //if (debug)
            //    Console.WriteLine("Response message: \n\n{0}\n\n", response.Message);

            JavaScriptSerializer responsed = new JavaScriptSerializer();
            dynamic res;
            try
            {
                res = responsed.Deserialize<dynamic>(response.Message);
            }
            catch
            {
                return new PhaxioOperationResult(false, "No data received from service.");
            }

            string sresMessage = "";
            string sStatus = "";
            string sErrorCode = "";
            string sErrorType = "";

            if (res.ContainsKey("message"))
                sresMessage = CheckNullString(res["message"]);

            if (res.ContainsKey("status"))
                sStatus = CheckNullString(res["status"]);

            if (res.ContainsKey("error_code"))
                sErrorCode = CheckNullString(res["error_code"]);

            if (res.ContainsKey("error_type"))
                sErrorType = CheckNullString(res["error_type"]);

            //object[] objRecipients = null;
            //dynamic dynRecipients = null;

            //if (res.ContainsKey("recipients"))
            //{
            //    objRecipients = res["recipients"];
            //    dynRecipients = objRecipients[0];

            //    if (dynRecipients.ContainsKey("error_code"))
            //        sErrorCode = sErrorCode + CheckNullString(dynRecipients["error_code"]);

            //    if (dynRecipients.ContainsKey("error_type"))
            //        sErrorType = sErrorType + CheckNullString(dynRecipients["error_type"]);
            //}

            Dictionary<string, object> resdata = new Dictionary<string, object>();
            resdata.Add("status", sStatus.Trim());
            resdata.Add("error_code", sErrorCode.Trim());
            resdata.Add("error_type", sErrorType.Trim());

            return new PhaxioOperationResult(true, sresMessage, resdata);
        }

        private string CheckNullString(object Value)
        {
            string strValue = "";
            if (Value != null)
                strValue = Value.ToString();

            return strValue;
        }        

        private string ToString(NameValueCollection source)
        {
            var str = new StringBuilder();
            foreach (KeyValuePair<string, string> kv in source)
                str.Append(string.Format("{0}{1}{2}{3}", kv.Key, '=', kv.Value, '&'));
            var retval = str.ToString();
            return retval.Substring(0, retval.Length - 1);
        }

        //private void copyValidOptionsToParameters(string[] validParameterNames, Dictionary<string, string> options, NameValueCollection parameters)
        //{
        //    foreach (string name in validParameterNames)
        //    {
        //        if (options.ContainsKey(name))
        //        {
        //            parameters.Add(name, options[name]);
        //        }
        //    }
        //}

        private PhaxioOperationResult createAndSendRequest(string url, NameValueCollection parameters)
        {
            string boundary = "---------------------------" + getSHA(DateTime.Now.Ticks.ToString("x"));
            byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes("\r\n--" + boundary + "\r\n");

            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
            webRequest.ContentType = "multipart/form-data; boundary=" + boundary;
            webRequest.Method = "POST";
            webRequest.KeepAlive = true;
            webRequest.Credentials = System.Net.CredentialCache.DefaultCredentials;

            Stream requestStream = webRequest.GetRequestStream();

            string formdataTemplate = "Content-Disposition: form-data; name=\"{0}\"\r\n\r\n{1}";
            string headerTemplate = "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: application/octet-stream\r\n\r\n";
            foreach (string key in parameters.Keys)
            {
                requestStream.Write(boundarybytes, 0, boundarybytes.Length);
                if (key.Contains("filename")) //Changed
                {
                    string header = string.Format(headerTemplate, key, parameters[key]);
                    byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);
                    requestStream.Write(headerbytes, 0, headerbytes.Length);
                    FileStream fileStream = new FileStream(parameters[key], FileMode.Open, FileAccess.Read);
                    byte[] buffer = new byte[4096];
                    int bytesRead = 0;
                    while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)
                    {
                        requestStream.Write(buffer, 0, bytesRead);
                    }
                    fileStream.Close();
                }
                else
                {

                    string formitem = string.Format(formdataTemplate, key, parameters[key]);
                    byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);
                    requestStream.Write(formitembytes, 0, formitembytes.Length);
                }
            }
            byte[] trailer = System.Text.Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");
            requestStream.Write(trailer, 0, trailer.Length);
            requestStream.Close();

            WebResponse webResponse = null;
            try
            {
                webResponse = webRequest.GetResponse();
                Stream stream2 = webResponse.GetResponseStream();
                StreamReader reader2 = new StreamReader(stream2);
                string message = reader2.ReadToEnd();
                webResponse.Close();
                webResponse = null;
                webRequest = null;
                return new PhaxioOperationResult(true, message);
            }
            catch (Exception ex)
            {
                if (webResponse != null)
                {
                    webResponse.Close();
                    webResponse = null;
                }
                webRequest = null;
                return new PhaxioOperationResult(false, ex.ToString());
            }
        }

        private string getSHA(string data)
        {
            SHA1 temp = new SHA1CryptoServiceProvider();
            UnicodeEncoding UE = new UnicodeEncoding();
            byte[] hash = temp.ComputeHash(UE.GetBytes(data));
            string result = "";
            foreach (var b in hash)
                result += b.ToString("X2");
            return result;
        }

    }

    public class PhaxioOperationResult
    {
        public PhaxioOperationResult(bool success, string message, Dictionary<string, object> data = null)
        {
            Success = success;
            Message = message;
            Data = data;
        }

        public bool Success { get; set; }

        public string Message { get; set; }

        public Dictionary<string, object> Data { get; set; }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_9a5698b569d546cb8e212af1c399891a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9a5698b569d546cb8e212af1c399891a.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
AAAGAgUoQAAABioeAnsQAAAEKiICA30QAAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9
EgAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAACwPAAAjfgAAmA8AALAS
AAAjU3RyaW5ncwAAAABIIgAArAoAACNVUwD0LAAAEAAAACNHVUlEAAAABC0AANQFAAAjQmxvYgAA
AAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAABdAAAACwAAACYAAABAAAAALgAAAIoAAAACAAAA
GgAAAAgAAAAGAAAAHAAAACAAAAAKAAAAAQAAAAoAAAABAAAAAQAAAAEAAAAAAFsIAQAAAAAABgBG
Bm4NBgDaBm4NBgCSBVsNDwDiDQAABgC/BUEKBgApBkEKBgAKBkEKBgDBBkEKBgBmBkEKBgB/BkEK
BgDWBUEKBgDxBV0HCgCaBiUEDgBmAK0MEgDRCrMQEgAKA7MQEgAKDbMQBgBKEH8JFgBTCogCBgAc
BH8JBgDfCn8JCgBiDCUEGgBTDCUECgBWCyUECgDnECUEBgB1BVsNBgBzDI4NBgAiCwAKFgAvBUUI
FgCmBUUIFgDRBOsJBgBaBW4NHgAXDRUKBgADAV4CBgAKDJkRBgA0DTIPBgD0AF4CBgCGA38JFgAo
EVEQBgBmCe4BFgDpBFEQBgA/Ce4BBgBNB5kRIgDUAG4NBgA+AX8JIgBLBW4NBgAfAX8JEgBGBBwC
EgCHCrMQFgCZDFEQFgBQBFEQBgCTB38JBgAxAX8JBgCTEu4BBgBBC+4BBgDlA+4BFgAhEhMPEgD+
DOkKEgAAA+kKBgCDCH8JBgD8Cn8JJgABANUMJgAqANUMJgBNANUMDgB/AK0MDgAaAK0MZwC5EQAA
DgCQAK0MBgB/BH8JBgCSA38JBgB0EkEKBgDnAH8JKgAuCxgMKgBkDhgMKgA/DBgMIgA3DG4NKgB8
DhgMIgBlBPsOBgDGAF4CFgC4BIgCBgDGC38JBgBUB5kRFgAsEVEQFgBvA1EQFgChDlEQQwGeCgAA
BgBGA+4BBgCFD+4BBgAPB38JBgDYC+4BBgDlC+4BBgDwC1MSBgCGCVMSAAAAAKABAAAAAAEAAQAB
ABAAyQkAABAAAQABAAEAEABGDAAAWQAFAAsAAQAQAMkQAABlAAUAHAABABAAXw8AAEkABwAgAAEA
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
uQAgBQUBsQAIEgsBsQB4EAsByQBODQYAoQHVDg8ByQBTDhcBkQBODQYAyQA6Ah0B8QFnCiMB+QEB
BCkBAQKDDDAByQAgDjUBCQJ2CTsByQDUEUIBEQKlEUgBKQKkA08BKQJwElgB2QBODV4B+QBODQYA
QQKHB4UACQFODQYACQFBB4EBSQIoBYwBWQLcCZYBFAAoBb0BFABcEMoBWQLLC84BHAAoBb0BHABc
EMoBJAB/AwgCLAB/Ax4CWQIgEScCNAAoBb0BNABcEMoBPAAoBb0BPABcEMoBWQIYElgCRAB/AwgC
TAB/Ax4CDABODQYAoQGUCYUADACEAoQCGQFODQYAgQJADaACIQH3EKYCVAA8ErICVAAUB7cCoQFD
ELwCGQEVA8MCIQGQEQsBMQEHBQYAoQDpEfgCoQCXDv0CqQGHB3MAkQLKAQEDkQI2DgcDmQIoBQ0D
mQJ0BBAAmQIcAxAAOQEuBxQDoQK+DhkDmQKuDh8DmQJcCSYDgQIzECwDsQJADaACQQFUBTIDoQHc
DjoDoQFDED8DkQJ6AQEDUQFODUYDQQF/AlEDQQEBBQYAmQL1BFkDSQFKCSYD0QJODV8D2QL2AoUA
SQEBBQYA4QJODQYAWQFODQYA6QKqB3EDyQKHB3MADgB5AJwDEgCtANEDLgALAA4FLgATABcFLgAb
ADYFLgAjAD8FLgArAGgFLgAzAGgFLgA7AGgFLgBDAD8FLgBLAG4FLgBTAGgFLgBbAIUFQwBjAM8F
4wBrAM8FYQF7AM8FYwF7AM8FAQJ7AM8FIQJ7AM8FQQJ7AM8F6QJzADYFCQNzADYFYAd7AM8FgAd7
AM8FoAd7AM8FwAd7AM8F4Ad7AM8FAAh7AM8FJQBOAL8AZgFrAYwCygJmAwMAAQAFAA8ABgAQAAcA
FwAIABkACgAaAAAArgnfBAAA+gjjBAAAnQnfBAAA4gjjBAAA7gPfBAAAtgjjBAAAvAHnBAAAjgjj
BAAA4gHfBAAApwjjBAAAEwXrBAAAygjjBAAADBDfBAAAFAnjBAAAEQvwBAAABAjfBAAALQjfBAAA
KxLfBAAAxg/fBAAA3w/fBAAAugffBAAA0QffBAAAcwz1BAAAsAT6BAAAiBD/BAAAoA/jBAAAXwPf
BAAASwIEBQIADAADAAIADQAFAAIADgAHAAIADwAJAAIAEAALAAIAEQANAAIAEgAPAAIAEwARAAIA
FAATAAIAFQAVAAIAFgAXAAIAFwAZAAIAGAAbAAIAGQAdAAIAIQAfAAIAIwAhAAIAJAAjAAIAJQAl
AAIAJgAnAAIAJwApAAIAKAArAAIAKQAtAAIAKwAvAAIALAAxAAEALQAxAAIALgAzAAIAOwA1AAEA
PAA1AAIAPQA3AAEAPgA3AAIAPwA5AAEAQAA5AMoArQHrAfwBEwI2AkYCbAJ5AqoCBIAAAAEAAAAA
AAAAAAAAAAAA+AEAAAQAAAAAAAAAAAAAAHgDVQIAAAAADgAAAAAAAAAAAAAAgQMDEQAAAAAOAAAA
AAAAAAAAAACBA24LAAAAAAQAAAAAAAAAAAAAAHgDHAIAAAAABAAAAAAAAAAAAAAAeAN/CQAAAAAO
AAAAAAAAAAAAAACBA1YRAAAAAAQAAAAAAAAAAAAAAIoD5Q4AAAAABAAAAAAAAAAAAAAAeAOEBAAA
AAAOAAAAAAAAAAAAAACBA5ELAAAAAAQAAAAAAAAAAAAAAJMDtQsAAAAAAAAAAAEAAACfDQAACwAJ
AJ8AiAEAAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTVmFyaWFibGUxMDAASURUU1J1
bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABJRFRTUnVudGltZUNvbm5lY3Rpb24xMDAASURU
U0Nvbm5lY3Rpb25NYW5hZ2VyMTAwAElEVFNWYXJpYWJsZXMxMDAASURUU0V2YWx1YXRvckNvbnRl
eHQxMDAAPD5wX18xMAA8PnBfXzAAPD5wX18xMQA8PnBfXzEASUVudW1lcmFibGVgMQBDYWxsU2l0
ZWAxADw+cF9fMTIASW50MzIAPD5wX18yAEtleVZhbHVlUGFpcmAyAERpY3Rpb25hcnlgMgA8PnBf
XzEzADw+cF9fMwBGdW5jYDMAPD5wX18xNABHZXRJbnQ2NAA8PnBfXzQARnVuY2A0ADw+cF9fMTUA
PD5wX181ADw+cF9fMTYAPD5wX182ADw+cF9fMTcAPD5wX183ADw+cF9fMTgAZ2V0X1VURjgAPD5v
X184ADw+cF9fOAA8PnBfXzE5ADw+cF9fOQA8TW9kdWxlPgBnZXRTSEEASW5wdXRJRABnZXRfRFRQ
Q05TTERGYXhJRABnZXRfQVNDSUkAUGhheGlvQVBJAGdldF9OUEkAaG9zdFVSTABTeXN0ZW0uSU8A
U0NfOWE1Njk4YjU2OWQ1NDZjYjhlMjEyYWYxYzM5OTg5MWEAU3lzdGVtLkRhdGEAZ2V0X0RhdGEA
c2V0X0RhdGEAZ2V0X0NvbXBvbmVudE1ldGFEYXRhAGRhdGEAbXNjb3JsaWIAU3lzdGVtLkNvbGxl
Y3Rpb25zLkdlbmVyaWMAZmF4SWQAUmVhZABBZGQAU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxp
emVkADxEYXRhPmtfX0JhY2tpbmdGaWVsZAA8TWVzc2FnZT5rX19CYWNraW5nRmllbGQAPFN1Y2Nl
c3M+a19fQmFja2luZ0ZpZWxkAHNxbENtZABSZWFkVG9FbmQARGJDb21tYW5kAFNxbENvbW1hbmQA
QXBwZW5kAHNldF9NZXRob2QAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UAc291cmNlAEZpbGVNb2Rl
AGdldF9NZXNzYWdlAHNldF9NZXNzYWdlAG1lc3NhZ2UAQ3JlZGVudGlhbENhY2hlAEludm9rZQBJ
RGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBWYWxpZGF0aW9u
QW5kQXJjaGl2ZUZpbGUAVXBkYXRlU3RhdHVzYW5kQXJjaGl2ZUZpbGUAZ2V0X0ZpbGVOYW1lAElu
cHV0TmFtZQBHZXRSdW50aW1lQ29ubmVjdGlvbkJ5TmFtZQBEYXRlVGltZQBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5QaXBlbGluZQBTcWxEYlR5cGUAU2VjdXJpdHlQcm90b2NvbFR5cGUARXhwcmVz
c2lvblR5cGUAc2V0X0NvbnRlbnRUeXBlAFN5c3RlbS5Db3JlAGdldF9DdWx0dXJlAHNldF9DdWx0
dXJlAHJlc291cmNlQ3VsdHVyZQBOYW1lT2JqZWN0Q29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAQ2xvc2UARGlzcG9zZQBnZXRfQ2Ft
cGFpZ25EYXRlAEdldERhdGUAQ3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAERlbGV0ZQBDYWxs
U2l0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRD
b21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50
aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAEJ5dGUAZ2V0
X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBzZXRfS2VlcEFsaXZlAE1vdmUARGVzZXJpYWxpemUAVW5p
Y29kZUVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQ2hlY2tOdWxsU3RyaW5nAFRv
U3RyaW5nAEdldFN0cmluZwBTdWJzdHJpbmcAZGVidWcAQ29tcHV0ZUhhc2gAZ2V0X0ZheE5vdFZl
cmlmaWVkUGF0aABnZXRfRmF4U2VuZFBhdGgAU291cmNlRmlsZVBhdGgARGVzdGluYXRpb25GaWxl
UGF0aABnZXRfRmF4QXJjaGl2ZVBhdGgARGVzdGluYXRpb25Gb2xkZXJQYXRoAGdldF9GYXhFcnJv
clBhdGgAZ2V0X0xlbmd0aABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfOWE1Njk4YjU2OWQ1NDZj
YjhlMjEyYWYxYzM5OTg5MWEuZGxsAERCTnVsbABnZXRfRFRQQ05TTERGYXhJRF9Jc051bGwAZ2V0
X05QSV9Jc051bGwAZ2V0X0ZpbGVOYW1lX0lzTnVsbABnZXRfQ2FtcGFpZ25EYXRlX0lzTnVsbABn
ZXRfU2VuZGVyRmF4TnVtX0lzTnVsbABnZXRfUmVjZWl2ZXJGYXhOdW1fSXNOdWxsAGdldF9MYXN0
U3RhdHVzX0lzTnVsbABzZXRfU2VjdXJpdHlQcm90b2NvbAB1cmwARmlsZVN0cmVhbQBHZXRSZXNw
b25zZVN0cmVhbQBHZXRSZXF1ZXN0U3RyZWFtAHNxbFBhcmFtAGdldF9JdGVtAFN5c3RlbQBIYXNo
QWxnb3JpdGhtAFRyaW0AZ2V0X1NlbmRlckZheE51bQBnZXRfUmVjZWl2ZXJGYXhOdW0AcmVzb3Vy
Y2VNYW4AU2NyaXB0TWFpbgBzcWxDb25uAFVuYXJ5T3BlcmF0aW9uAFN5c3RlbS5Db25maWd1cmF0
aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5XZWIuU2NyaXB0LlNlcmlhbGl6YXRpb24A
VHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24ATmFtZVZhbHVlQ29sbGVjdGlvbgBnZXRfUnVu
dGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24AS2V5c0NvbGxl
Y3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AUmVsZWFzZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBF
eGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAFN0cmluZ0NvbXBhcmlzb24AZ2V0X1N0YXJzQ2Fs
bExpc3RhZG8AQ3VsdHVyZUluZm8AQ1NoYXJwQXJndW1lbnRJbmZvAERpcmVjdG9yeUluZm8AUGhh
eGlvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGlt
ZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAATWljcm9zb2Z0LkNTaGFy
cABDaGFyAEludm9rZU1lbWJlcgBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBTSEExQ3J5cHRvU2Vy
dmljZVByb3ZpZGVyAFN0cmluZ0J1aWxkZXIATWljcm9zb2Z0LkNTaGFycC5SdW50aW1lQmluZGVy
AENhbGxTaXRlQmluZGVyAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIA
Z2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ29ubmVjdGlvbk1hbmFnZXIAU2VydmljZVBvaW50TWFu
YWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgBEYlBhcmFtZXRlcgBTcWxQYXJhbWV0ZXIASmF2
YVNjcmlwdFNlcmlhbGl6ZXIAY29ubk1ncgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9y
AC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNl
cwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzlhNTY5OGI1NjlkNTQ2Y2I4ZTIxMmFmMWMzOTk4OTFhLlBy
b3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ185YTU2OThiNTY5
ZDU0NmNiOGUyMTJhZjFjMzk5ODkxYS5Qcm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwBH
ZXRCeXRlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAQ1NoYXJwQXJndW1l
bnRJbmZvRmxhZ3MAQ1NoYXJwQmluZGVyRmxhZ3MAU2V0dGluZ3MAZ2V0X1RpY2tzAElDcmVkZW50
aWFscwBzZXRfQ3JlZGVudGlhbHMAZ2V0X0RlZmF1bHRDcmVkZW50aWFscwBFcXVhbHMAQ29udGFp
bnMAU3lzdGVtLldlYi5FeHRlbnNpb25zAFN5c3RlbS5MaW5xLkV4cHJlc3Npb25zAFN5c3RlbS5U
ZXh0LlJlZ3VsYXJFeHByZXNzaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAQWNxdWlyZUNvbm5lY3Rp
b25zAFJlbGVhc2VDb25uZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBwYXJhbWV0ZXJzAEZpbGVBY2Nl
c3MAZ2V0X1N1Y2Nlc3MAc2V0X1N1Y2Nlc3MAc3VjY2VzcwBWYWxpZGF0aW9uUHJvY2VzcwBnZXRf
RmF4aW1pbmlvbkdldEFkZHJlc3MAZ2V0X0ZheGltaW5pb25UcmFuc21pdEFkZHJlc3MAYWRkcmVz
cwBFeGlzdHMAZ2V0X0xhc3RTdGF0dXMAZmF4U3RhdHVzAFVwZGF0ZVJldHJ5U3RhdHVzAGdldF9L
ZXlzAENvbmNhdABGb3JtYXQAT2JqZWN0AFN5c3RlbS5OZXQAVGFyZ2V0AGFwaVNlY3JldABhcGlf
c2VjcmV0AEVuZE9mUm93c2V0AGdldF9EZWZhdWx0AFBoYXhpb09wZXJhdGlvblJlc3VsdABQaGF4
aW9SZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9u
ZW50AFNjcmlwdENvbXBvbmVudABnZXRfQ3VycmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2Ny
aXB0AENvbnZlcnQASHR0cFdlYlJlcXVlc3QAY3JlYXRlQW5kU2VuZFJlcXVlc3QAZG9SZXF1ZXN0
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AGhvc3QASW5wdXQwX1Byb2Nlc3NJbnB1
dABNb3ZlTmV4dABTeXN0ZW0uVGV4dABHZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlwdENvbXBvbmVu
dEV2YWxDb250ZXh0AGdldF9FdmFsdWF0b3JDb250ZXh0AGdldF9Ob3cASW5wdXQwX1Byb2Nlc3NJ
bnB1dFJvdwBOZXh0Um93AHNlbmRGYXgAR2V0SW5kZXgAUmVnZXgAZ2V0X0ZheGltaW5pb25BUElL
ZXkAZ2V0X0tleQBhcGlLZXkAYXBpX2tleQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5AGdl
dF9Bc3NlbWJseQBFeGVjdXRlTm9uUXVlcnkAQ3JlYXRlRGlyZWN0b3J5AG9wX0VxdWFsaXR5AEVt
cHR5AAAAge91AHAAZABhAHQAZQAgAFsAZABiAG8AXQAuAFsARABUAFAAXwBDAE4AUwBMAEQAXwBG
AGEAeABfAEwAaQBzAHQAXQAgAHMAZQB0ACAAIABbAEYAYQB4AFMAZQBuAGQASQBuAGQAXQAgAD0A
IABAAEYAYQB4AFMAZQBuAGQASQBuAGQALAAgAEYAYQB4AFMAZQBuAGQARABhAHQAZQAgAD0AIABn
AGUAdABkAGEAdABlACgAKQAsACAAWwBMAGEAcwB0AFMAdABhAHQAdQBzAF0APQAgAEAATABhAHMA
dABTAHQAYQB0AHUAcwAsACAAWwBSAGUAcwBwAG8AbgBzAGUATQBlAHMAcwBhAGcAZQBdAD0AIABA
AFIAZQBzAHAAbwBuAHMAZQBNAGUAcwBzAGEAZwBlACwAIABFAHIAcgBvAHIAQwBvAGQAZQAgAD0A
IABAAEUAcgByAG8AcgBDAG8AZABlACwAIABFAHIAcgBvAHIAVAB5AHAAZQAgAD0AIABAAEUAcgBy
AG8AcgBUAHkAcABlACAAdwBoAGUAcgBlACAAWwBEAFQAUABfAEMATgBTAEwARABfAEYAYQB4AF8A
SQBEAF0AIAA9ACAAQABEAFQAUABfAEMATgBTAEwARABfAEYAYQB4AF8ASQBEAAAjQABEAFQAUABf
AEMATgBTAEwARABfAEYAYQB4AF8ASQBEAAAXQABGAGEAeABTAGUAbgBkAEkAbgBkAAAXQABMAGEA
cwB0AFMAdABhAHQAdQBzAAAhQABSAGUAcwBwAG8AbgBzAGUATQBlAHMAcwBhAGcAZQAAFUAARQBy
AHIAbwByAEMAbwBkAGUAABVAAEUAcgByAG8AcgBUAHkAcABlAAAJLgBwAGQAZgAAFU0ATQAtAGQA
ZAAtAHkAeQB5AHkAAQNcAAAhZgBhAHgAWwBmAHIAbwBtAF8AbgB1AG0AYgBlAHIAXQAAHWYAYQB4
AFsAdABvAF8AbgB1AG0AYgBlAHIAXQAAHWYAYQB4AFsAYwBsAGkAZQBuAHQAXwBpAGQAXQAAG2YA
YQB4AFsAZgBpAGwAZQBuAGEAbQBlAF0AABljAGEAbABsAGIAYQBjAGsAXwB1AHIAbAAANWgAdAB0
AHAAOgAvAC8AdABlAHMAdAAuAGwAbwBjAGEAbAAvAGMAYQBsAGwAYgBhAGMAawAAD2EAcABpAF8A
awBlAHkAAA1mAG8AcgBtAGEAdAAACWoAcwBvAG4AABVTAGUAbgB0AEIAZQBmAG8AcgBlAAAXTgBv
AHQAVgBlAHIAaQBmAGkAZQBkAABRWQBvAHUAIABtAHUAcwB0ACAAaQBuAGMAbAB1AGQAZQAgAGEA
IAB0AG8AIABmAGEAeAAgAG4AdQBtAGIAZQByACAAbgB1AG0AYgBlAHIALgAADVsAXgAwAC0AOQBd
AAE1VABvACAAZgBhAHgAIABuAHUAbQBiAGUAcgAgAGkAcwAgAG4AbwB0ACAAdgBhAGwAaQBkAAAx
WQBvAHUAIABtAHUAcwB0ACAAaQBuAGMAbAB1AGQAZQAgAGEAIABmAGkAbABlAC4AAD1UAGgAZQAg
AGYAaQBsAGUAIAAnAHsAMAB9ACcAIABkAG8AZQBzACAAbgBvAHQAIABlAHgAaQBzAHQALgABMVYA
YQBsAGkAZABhAHQAaQBvAG4AIABpAHMAIABzAHUAYwBjAGUAcwBzAGYAdQBsAAAPZgBhAGkAbAB1
AHIAZQAAA04AACNWAGEAbABpAGQAYQB0AGkAbwBuACAAZgBhAGkAbABlAGQAAANZAAANcwB0AGEA
dAB1AHMAABVlAHIAcgBvAHIAXwBjAG8AZABlAAAVZQByAHIAbwByAF8AdAB5AHAAZQAAC1IAZQB0
AHIAeQAAgJlBAG4AIABlAHIAcgBvAHIAIABoAGEAcwAgAG8AYwBjAHUAcgByAGUAZAAgAHcAaABp
AGwAZQAgAHUAcABsAG8AYQBkAGkAbgBnACAAYQAgAGYAYQB4ACAAZABvAGMAdQBtAGUAbgB0ACAA
dgBpAGEAIAB0AGgAZQAgAGYAYQB4AGkAbQBpAG4AaQBvAG4AIABBAFAASQAuAAAPSQBuAHAAdQB0
ACAAMAAAJ1MAdABhAHIAcwBfAEMAYQBsAGwAXwBMAGkAcwB0AF8AYQBkAG8AAB1GAGEAeABBAHIA
YwBoAGkAdgBlAFAAYQB0AGgAABlGAGEAeABFAHIAcgBvAHIAUABhAHQAaAAAIUYAYQB4AGkAbQBp
AG4AaQBvAG4AQQBQAEkASwBlAHkAAClGAGEAeABpAG0AaQBuAGkAbwBuAEcAZQB0AEEAZABkAHIA
ZQBzAHMAADNGAGEAeABpAG0AaQBuAGkAbwBuAFQAcgBhAG4AcwBtAGkAdABBAGQAZAByAGUAcwBz
AAAlRgBhAHgATgBvAHQAVgBlAHIAaQBmAGkAZQBkAFAAYQB0AGgAABdGAGEAeABTAGUAbgBkAFAA
YQB0AGgAAHFTAEMAXwA5AGEANQA2ADkAOABiADUANgA5AGQANQA0ADYAYwBiADgAZQAyADEAMgBh
AGYAMQBjADMAOQA5ADgAOQAxAGEALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIA
YwBlAHMAADdBACAAdgBhAGwAaQBkACAAZgBhAHgAIABpAGQAIABpAHMAIAByAGUAcQB1AGkAcgBl
AGQALgAABWkAZAAAE2YAYQB4AFMAdABhAHQAdQBzAAA9TgBvACAAZABhAHQAYQAgAHIAZQBjAGUA
aQB2AGUAZAAgAGYAcgBvAG0AIABzAGUAcgB2AGkAYwBlAC4AAAEAF0MAbwBuAHQAYQBpAG4AcwBL
AGUAeQAAD20AZQBzAHMAYQBnAGUAAB9DAGgAZQBjAGsATgB1AGwAbABTAHQAcgBpAG4AZwAAGXsA
MAB9AHsAMQB9AHsAMgB9AHsAMwB9AAA3LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAt
AC0ALQAtAC0ALQAtAC0ALQAtAC0AAQN4AAAJDQAKAC0ALQABBQ0ACgAAPW0AdQBsAHQAaQBwAGEA
cgB0AC8AZgBvAHIAbQAtAGQAYQB0AGEAOwAgAGIAbwB1AG4AZABhAHIAeQA9AAEJUABPAFMAVAAA
Y0MAbwBuAHQAZQBuAHQALQBEAGkAcwBwAG8AcwBpAHQAaQBvAG4AOgAgAGYAbwByAG0ALQBkAGEA
dABhADsAIABuAGEAbQBlAD0AIgB7ADAAfQAiAA0ACgANAAoAewAxAH0AAYDNQwBvAG4AdABlAG4A
dAAtAEQAaQBzAHAAbwBzAGkAdABpAG8AbgA6ACAAZgBvAHIAbQAtAGQAYQB0AGEAOwAgAG4AYQBt
AGUAPQAiAHsAMAB9ACIAOwAgAGYAaQBsAGUAbgBhAG0AZQA9ACIAewAxAH0AIgANAAoAQwBvAG4A
dABlAG4AdAAtAFQAeQBwAGUAOgAgAGEAcABwAGwAaQBjAGEAdABpAG8AbgAvAG8AYwB0AGUAdAAt
AHMAdAByAGUAYQBtAA0ACgANAAoAARFmAGkAbABlAG4AYQBtAGUAAAktAC0ADQAKAAEFWAAyAAAA
AHxWO+qzOORLrX3kU+PyOkMABCABAQgDIAABBSABARERBCABAQ4FIAEBEXUEIAEcHAQgAQEcAwcB
DgYgAgEOEj0HIAIBDhGAwQUgABKAxQYgARJFEkUIIAMBDhGAwQgXBxEODg4ODg4ODg4OEk0RUQoO
DhIoEigGAAEBEYDNBQACDg4OBCABDg4GAAMODg4OBSACAQ4OAyAADgUAAgIODgQAAQIOBgABEoDd
DgQAAQEOBQACAQ4OBQABDh0OAyAACAIGDgUgAg4ODgUAAg4OHAQHAg4OBSABEkUOBxUSgIkCDhwG
IAETARMABAYSgPEFIAIOCAgJIAMBEl0dCBJhAwYSXQMGHQgEIAEOCAQgAQIIBCABCggFIAERUQgD
IAACByACAg4RgPUFIAEdCAgFIAASgPkFIAASgP0GIAESgQEOBCAAEjkFIAASgQUGIAESgQkcBQAA
EoENBiABHBKBEQgAARKBFRGBGQUgABKBHQcgAgEOEoEdBAcBEk0VBwkSKBKAhRwODg4OFRKAiQIO
HBIoBjABAR4ADgMKARwJAAISgSURgSkOFgAEEoExEYE1EYE5EoEVFRKBPQESgSUPFRKAsQEVEoC9
AxKAuRwCDAABFRKAsQETABKBMQMGEwAcAAUSgTERgTUOFRKBPQESgRUSgRUVEoE9ARKBJRAVEoCx
ARUSgLUEEoC5HA4cCxUSgLUEEoC5HA4cCiADEwMTABMBEwIKFRKAvQMSgLkcAgggAhMCEwATAQ4A
AxKBMRGBNRKBFRKBFQ8VEoCxARUSgL0DEoC5HA4RFRKAsQEVEoC1BBKAuRIkHBwTAAMSgTERgTUS
gRUVEoE9ARKBJQwVEoC1BBKAuRIkHBwKFRKAvQMSgLkcDgcgAgETABMBEwcFEoCNDhKAkRURgJUC
Dg4SgJkFIAASgJEDIAAcBxURgJUCDg4EIAATAAQgABMBBgACDg4dHAYgARKAjQ4tBxcOHQUSgJ0S
gKEODh0FEoClEVEKEoCRDg4dBRKAqR0FCA4dBRKAmQ4SKBJVBAAAEVEDIAAKBQAAEoFJBSABHQUO
BgABEoFNDgQgAQECBQAAEoFVBiABARKBVQUgABKAoQUgABKBWQcgAwEdBQgIBCABAg4GAAMODhwc
CiADAQ4RgV0RgWEHIAMIHQUICAUgABKApQYgAQESgKEKBwUSgK0OHQUIBQYgAR0FHQUIt3pcVhk0
4IkIiYRdzYCAzJEIMb84Vq02TjUIsD9ffxHVCjo0aAB0AHQAcABzADoALwAvAGEAcABpAC4AcABo
AGEAeABpAG8ALgBjAG8AbQAvAHYAMQAvAAQAAAAAAwYSOQMGEj0DBhJBAwYSRQMGEhQDBhIYAwYS
ZQMGEm0DBhJxAwYSIAIGAggGFRKAiQIOHBEGFRKAsQEVEoC1BBKAuRwOHBAGFRKAsQEVEoC9AxKA
uRwCEgYVEoCxARUSgLUEEoC5EiQcHBAGFRKAsQEVEoC9AxKAuRwOBSABARIMBiABEigSTQkgBQES
KA4OCg4GIAIBEigKBCAAEVEJIAQBCA4SXRJhBSABARJlBAAAEm0EAAAScQUAAQEScQQAABIgAwAA
AQYgAwEODg4FIAESKAgHIAISKA4STQQgAQ4cBSABDhJNDCADAQIOFRKAiQIOHAkgABUSgIkCDhwK
IAEBFRKAiQIOHAMoAA4DKAACAygACgQoABFRBCgAEjkECAASbQQIABJxBAgAEiAJKAAVEoCJAg4c
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ185
YTU2OThiNTY5ZDU0NmNiOGUyMTJhZjFjMzk5ODkxYQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAy
MDE1AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuNQQBAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAOhqAAAAAAAAAAAAAAJrAAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0agAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUu
ZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAAB
AAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAAOwDAAAAAAAAAAAAAOwDNAAAAFYA
UwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/
AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAA
AAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAAAQBTAHQAcgBpAG4AZwBG
AGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUA
bgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBp
AGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADkAYQA1ADYAOQA4AGIANQA2ADkA
ZAA1ADQANgBjAGIAOABlADIAMQAyAGEAZgAxAGMAMwA5ADkAOAA5ADEAYQAAADAACAABAEYAaQBs
AGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0AGUAcgBuAGEA
bABOAGEAbQBlAAAAUwBDAF8AOQBhADUANgA5ADgAYgA1ADYAOQBkADUANAA2AGMAYgA4AGUAMgAx
ADIAYQBmADEAYwAzADkAOQA4ADkAMQBhAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAA
eQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADUAAAAqAAEAAQBM
AGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEA
bABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwA5AGEANQA2ADkAOABiADUANgA5AGQANQA0ADYAYwBi
ADgAZQAyADEAMgBhAGYAMQBjADMAOQA5ADgAOQAxAGEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQA
dQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AOQBhADUANgA5ADgAYgA1ADYAOQBkADUANAA2AGMAYgA4
AGUAMgAxADIAYQBmADEAYwAzADkAOQA4ADkAMQBhAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAUOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_9a5698b569d546cb8e212af1c399891a</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">$Project::FaxSendPath,$Project::FaxArchivePath,$Project::FaxErrorPath,$Project::FaxNotVerifiedPath,$Project::FaximinionAPIKey,$Project::FaximinionGetAddress,$Project::FaximinionTransmitAddress</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">c06a8e7d1f5fba868e3add4658099bed</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">c46416286a035b6ffe40a3ddf4561751c29d31b1</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">F2</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Connections[Stars_Call_List_ado]"
                  connectionManagerID="{4861DAC2-8379-438B-9BCD-B3EEA9644BEC}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Stars_Call_List_ado]"
                  name="Stars_Call_List_ado" />
              </connections>
              <inputs>
                <input
                  refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[ReceiverFaxNum]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="ReceiverFaxNum"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[ReceiverFaxNum]" />
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[SenderFaxNum]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="SenderFaxNum"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[SenderFaxNum]" />
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[FileName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="FileName"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[FileName]" />
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[DTP_CNSLD_Fax_ID]"
                      cachedDataType="i8"
                      cachedName="DTP_CNSLD_Fax_ID"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[DTP_CNSLD_Fax_ID]" />
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[NPI]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="25"
                      cachedName="NPI"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[NPI]" />
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[Campaign_Date]"
                      cachedDataType="dbDate"
                      cachedName="Campaign_Date"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[Campaign_Date]" />
                    <inputColumn
                      refId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0].Columns[LastStatus]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="LastStatus"
                      lineageId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output].Columns[LastStatus]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Get and Send Fax to Faximinion.Paths[OLE DB Source Output]"
              endId="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion.Inputs[Input 0]"
              name="OLE DB Source Output"
              startId="Package\Get and Send Fax to Faximinion\Get all Fax file Information.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Retry Failed Get and Send Fax to Faximinion"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{c7532576-0e3b-4142-a38d-1943329c69c8}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Retry Failed Get and Send Fax to Faximinion"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Retry get all Fax file Information"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">Select [DTP_CNSLD_Fax_ID]
    ,[NPI]
    ,[ReceiverFaxNum]
    ,[SenderFaxNum]
    ,[FileName]
    ,[Campaign_Date]
    ,[LastStatus]
From [dbo].[DTP_CNSLD_Fax_List]
Where [Campaign_Date] = (Select max([Campaign_Date]) From [dbo].[DTP_CNSLD_Fax_List])
and [LastStatus] in ('failure','retry')</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Connections[OleDbConnection]"
                  connectionManagerID="{6311C9A2-D389-4B9C-B757-1A615A452B59}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Stars_Call_Lists]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[ReceiverFaxNum]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[ReceiverFaxNum]"
                      length="20"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[ReceiverFaxNum]"
                      name="ReceiverFaxNum"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[SenderFaxNum]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[SenderFaxNum]"
                      length="20"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[SenderFaxNum]"
                      name="SenderFaxNum"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[FileName]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[FileName]"
                      length="50"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[FileName]"
                      name="FileName"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[DTP_CNSLD_Fax_ID]"
                      dataType="i8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[DTP_CNSLD_Fax_ID]"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[DTP_CNSLD_Fax_ID]"
                      name="DTP_CNSLD_Fax_ID"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[NPI]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[NPI]"
                      length="25"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[NPI]"
                      name="NPI"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[Campaign_Date]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[Campaign_Date]"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[Campaign_Date]"
                      name="Campaign_Date"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[LastStatus]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[LastStatus]"
                      length="20"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[LastStatus]"
                      name="LastStatus"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[ReceiverFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="ReceiverFaxNum" />
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[SenderFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="SenderFaxNum" />
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[FileName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="FileName" />
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[DTP_CNSLD_Fax_ID]"
                      dataType="i8"
                      name="DTP_CNSLD_Fax_ID" />
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[NPI]"
                      codePage="1252"
                      dataType="str"
                      length="25"
                      name="NPI" />
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[Campaign_Date]"
                      dataType="dbDate"
                      name="Campaign_Date" />
                    <externalMetadataColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].ExternalColumns[LastStatus]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="LastStatus" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[DTP_CNSLD_Fax_ID]"
                      dataType="i8"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[DTP_CNSLD_Fax_ID]"
                      name="DTP_CNSLD_Fax_ID" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[NPI]"
                      codePage="1252"
                      dataType="str"
                      length="25"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[NPI]"
                      name="NPI" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ReceiverFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ReceiverFaxNum]"
                      name="ReceiverFaxNum" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[SenderFaxNum]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[SenderFaxNum]"
                      name="SenderFaxNum" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[FileName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[FileName]"
                      name="FileName" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[Campaign_Date]"
                      dataType="dbDate"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[Campaign_Date]"
                      name="Campaign_Date" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[LastStatus]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[LastStatus]"
                      name="LastStatus" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Retry send fax file to Faximinion"
              validateExternalMetadata="False"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="33">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections.Specialized;
using System.IO;
using Phaxio;
using System.Data.SqlClient;


#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection); 
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion


    IDTSConnectionManager100 connMgr;
    SqlConnection sqlConn;
    SqlCommand sqlCmd;
    SqlParameter sqlParam;

    public override void AcquireConnections(object Transaction)
    {
        connMgr = this.Connections.StarsCallListado;
        sqlConn = (SqlConnection)connMgr.AcquireConnection(null);
    }

    public override void ReleaseConnections()
    {
        connMgr.ReleaseConnection(sqlConn);
    }

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
        string updateQuery = "update [dbo].[DTP_CNSLD_Fax_List] set  [FaxSendInd] = @FaxSendInd, FaxSendDate = getdate(), [LastStatus]= @LastStatus, [ResponseMessage]= @ResponseMessage, " +
                             "ErrorCode = @ErrorCode, ErrorType = @ErrorType where [DTP_CNSLD_Fax_ID] = @DTP_CNSLD_Fax_ID";
        sqlCmd = new SqlCommand(updateQuery, sqlConn);

        sqlParam = new SqlParameter("@DTP_CNSLD_Fax_ID", SqlDbType.BigInt);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@FaxSendInd", SqlDbType.Char, 1);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@LastStatus", SqlDbType.VarChar, 20);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@ResponseMessage", SqlDbType.VarChar, 1000);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@ErrorCode", SqlDbType.VarChar, 2000);
        sqlCmd.Parameters.Add(sqlParam);
        sqlParam = new SqlParameter("@ErrorType", SqlDbType.VarChar, 1000);
        sqlCmd.Parameters.Add(sqlParam);

    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        System.Net.ServicePointManager.SecurityProtocol =
                System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;

        //Prod
        // string FaximinionAddress = "https://faximinion.pharmmd.com/faxes/transmit";
        string FaximinionAddress = Variables.FaximinionTransmitAddress;
        // string FaximinionAPIKey = "b773fa77efbbfb9f";
        string FaximinionAPIKey = Variables.FaximinionAPIKey;

        //Test
        //string FaximinionAddress = "https://faximinionstaging.pharmmd.com/faxes/transmit";
        //string FaximinionAPIKey = "e4d605934e4c5733e9ef";

        //Prod

        // string SourceFolderPath = @"\\p10prdsde003.pharmmd.local\Stars\FaxSend\"; // This is SQLSTARS where process created all files
        string SourceFolderPath = Variables.FaxSendPath;

        // string ArchiveFolderPath = @"\\10.5.4.113\General\Stars\HRMLetters\PDFLetters\Archive\"; // this is Z drive path(Z:\)
        string ArchiveFolderPath = Variables.FaxArchivePath;

        // string ErrorFolderPath = @"\\10.5.4.113\General\Stars\HRMLetters\PDFLetters\Error\"; // this is Z drive path(Z:\)
        string ErrorFolderPath = Variables.FaxErrorPath;

        // string NotVerifiedFolderPath = @"\\10.5.4.113\General\Stars\HRMLetters\PDFLetters\NotVerified\"; // this is Z drive path(Z:\)
        string NotVerifiedFolderPath = Variables.FaxNotVerifiedPath;

        //Dev
        //string SourceFolderPath = @"W:\Stars\FaxSend\";
        //string ArchiveFolderPath = @"W:\Stars\Fax\Archive\";
        //string ErrorFolderPath = @"W:\Stars\Fax\Error\";
        //Local
        //string SourceFolderPath = @"C:\Stars\FaxSend\";
        //string ArchiveFolderPath = @"C:\Stars\Fax\Archive\";
        //string ErrorFolderPath = @"C:\Stars\Fax\Error\";

        try
        {
            string LastStatus = Row.LastStatus;
            string Filename = Row.FileName + ".pdf";
            string SourceFilePath = SourceFolderPath + Filename;
            string FileCreateDate = Row.CampaignDate.ToString("MM-dd-yyyy");
            string DestinationFolderPath = ArchiveFolderPath + @"\" + FileCreateDate;

            NameValueCollection FaxParameters = new NameValueCollection()
                            {
                                { "fax[from_number]", Row.SenderFaxNum},
                                { "fax[to_number]", Row.ReceiverFaxNum },
                                { "fax[client_id]", Row.DTPCNSLDFaxID.ToString() },
                                { "fax[filename]", SourceFilePath },
                                {"callback_url", "http://test.local/callback"},
                                { "api_key", FaximinionAPIKey},
                                { "format", "json" }
                            };

            if (LastStatus == "SentBefore")
            {
                string DestinationFilePath = DestinationFolderPath + @"\" + Filename;

                if (!Directory.Exists(DestinationFolderPath))
                    Directory.CreateDirectory(DestinationFolderPath);
                if (File.Exists(DestinationFilePath))
                    File.Delete(DestinationFilePath);

                File.Move(SourceFilePath, DestinationFilePath);
            }
            if (LastStatus == "NotVerified")
            {
                string DestinationFilePath = NotVerifiedFolderPath + @"\" + FileCreateDate + @"\" + Filename;

                if (!Directory.Exists(DestinationFolderPath))
                    Directory.CreateDirectory(DestinationFolderPath);
                if (File.Exists(DestinationFilePath))
                    File.Delete(DestinationFilePath);

                File.Move(SourceFilePath, DestinationFilePath);
            }
            else
            {
                PhaxioOperationResult ValidationPhaxioResult = ValidationProcess(FaxParameters);
                if (!ValidationPhaxioResult.Success)
                {
                    DestinationFolderPath = ErrorFolderPath + @"\" + FileCreateDate;
                    ValidationAndArchiveFile(ValidationPhaxioResult, SourceFilePath, DestinationFolderPath, Row.DTPCNSLDFaxID, DestinationFolderPath + @"\" + Filename);
                }
                else
                {
                    PhaxioAPI objPhaxioAPI = new PhaxioAPI();
                    PhaxioOperationResult PhaxioResult = objPhaxioAPI.sendFax(FaximinionAddress, FaxParameters);
                    if (PhaxioResult.Success)
                        UpdateStatusandArchiveFile(PhaxioResult, SourceFilePath, DestinationFolderPath, Row.DTPCNSLDFaxID, DestinationFolderPath + @"\" + Filename);
                    else
                        UpdateRetryStatus(PhaxioResult, Row.DTPCNSLDFaxID);
                }
            }
        }
        catch (Exception ex)
        {
            //SaveandArchiveFile(new PhaxioOperationResult(false, ex.ToString()), SourceFolderPath + FileName, DestinationFolderPath, Row.FaxKey);
            ex.ToString();
        }
    }

    public PhaxioOperationResult ValidationProcess(NameValueCollection parameters)
    {
        if ((parameters["fax[to_number]"] == null) || (parameters["fax[to_number]"].Length == 0))
            return new PhaxioOperationResult(false, "You must include a to fax number number.");

        Regex regex = new Regex("[^0-9]");
        string ToFaxNum = regex.Replace(parameters["fax[to_number]"], String.Empty);
        if (!(ToFaxNum.Length == 10 || ToFaxNum.Length == 11))
            return new PhaxioOperationResult(false, "To fax number is not valid");

        //Accepts only 10 digits, no more no less
        //Regex pattern = new Regex(@"(?<!\d)\d{10}(?!\d)");
        //if (!pattern.IsMatch(parameters["fax[to_number]"]))
        //    return new PhaxioOperationResult(false, "To fax number is not valid");

        if (parameters["fax[filename]"] == null && (parameters["fax[filename]"].Length == 0))
            return new PhaxioOperationResult(false, "You must include a file.");

        if (parameters["fax[filename]"] != null)
            if (!File.Exists(parameters["fax[filename]"]))
            {
                return new PhaxioOperationResult(false, System.String.Format("The file '{0}' does not exist.", parameters["fax[filename]"]));
            }

        return new PhaxioOperationResult(true, "Validation is successful");
    }

    public void ValidationAndArchiveFile(PhaxioOperationResult PhaxioResult, string SourceFilePath, string DestinationFolderPath, long DTPCNSLDFaxID, string DestinationFilePath)
    {
        string faxStatus = "failure";
        string faxSendInd = "N";

        sqlCmd.Parameters["@DTP_CNSLD_Fax_ID"].Value = DTPCNSLDFaxID;
        sqlCmd.Parameters["@FaxSendInd"].Value = faxSendInd;
        sqlCmd.Parameters["@LastStatus"].Value = faxStatus;
        sqlCmd.Parameters["@ResponseMessage"].Value = PhaxioResult.Message;
        sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Message;
        sqlCmd.Parameters["@ErrorType"].Value = "Validation failed";

        sqlCmd.ExecuteNonQuery();

        if (!Directory.Exists(DestinationFolderPath))
            Directory.CreateDirectory(DestinationFolderPath);
        if (File.Exists(DestinationFilePath))
            File.Delete(DestinationFilePath);
        File.Move(SourceFilePath, DestinationFilePath);
    }

    public void UpdateStatusandArchiveFile(PhaxioOperationResult PhaxioResult, string SourceFilePath, string DestinationFolderPath, long DTPCNSLDFaxID, string DestinationFilePath)
    {

        sqlCmd.Parameters["@DTP_CNSLD_Fax_ID"].Value = DTPCNSLDFaxID;
        sqlCmd.Parameters["@FaxSendInd"].Value = "Y";
        sqlCmd.Parameters["@LastStatus"].Value = PhaxioResult.Data["status"].ToString() == string.Empty ? DBNull.Value : PhaxioResult.Data["status"];
        sqlCmd.Parameters["@ResponseMessage"].Value = PhaxioResult.Message;
        sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Data["error_code"].ToString() == string.Empty ? DBNull.Value : PhaxioResult.Data["error_code"];
        sqlCmd.Parameters["@ErrorType"].Value = PhaxioResult.Data["error_type"].ToString() == string.Empty ? DBNull.Value : PhaxioResult.Data["error_type"];

        sqlCmd.ExecuteNonQuery();

        if (!Directory.Exists(DestinationFolderPath))
            Directory.CreateDirectory(DestinationFolderPath);
        if (File.Exists(DestinationFilePath))
            File.Delete(DestinationFilePath);
        File.Move(SourceFilePath, DestinationFilePath);

    }

    public void UpdateRetryStatus(PhaxioOperationResult PhaxioResult, long DTPCNSLDFaxID)
    {
        string faxStatus = "retry";
        string faxSendInd = "N";

        sqlCmd.Parameters["@DTP_CNSLD_Fax_ID"].Value = DTPCNSLDFaxID;
        sqlCmd.Parameters["@FaxSendInd"].Value = faxSendInd;
        sqlCmd.Parameters["@LastStatus"].Value = faxStatus;
        sqlCmd.Parameters["@ResponseMessage"].Value = "An error has occurred while uploading fax document via the faximinion API";

        if (PhaxioResult.Message.Length > 2000)
        {
            sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Message.Substring(1, 2000);
        }
        else
        {
            sqlCmd.Parameters["@ErrorCode"].Value = PhaxioResult.Message;
        }

        sqlCmd.Parameters["@ErrorType"].Value = "An error has occurred while uploading a fax document via the faximinion API";

        sqlCmd.ExecuteNonQuery();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9a5698b569d546cb8e212af1c399891a.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{305B8FB3-AF96-4437-9C10-B71D1A50EC0E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_9a5698b569d546cb8e212af1c399891a</RootNamespace>
    <AssemblyName>SC_9a5698b569d546cb8e212af1c399891a</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="PhaxioAPI.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 StarsCallListado
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Stars_Call_List_ado").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String FaxArchivePath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxArchivePath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaxErrorPath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxErrorPath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaximinionAPIKey
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaximinionAPIKey"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaximinionGetAddress
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaximinionGetAddress"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaximinionTransmitAddress
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaximinionTransmitAddress"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaxNotVerifiedPath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxNotVerifiedPath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FaxSendPath
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FaxSendPath"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Settings.get_Default():SC_9a5698b569d546cb8e212af1c399891a.Properties.Sett" +
    "ings")]

namespace SC_9a5698b569d546cb8e212af1c399891a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String ReceiverFaxNum
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool ReceiverFaxNum_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String SenderFaxNum
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool SenderFaxNum_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String FileName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool FileName_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public Int64 DTPCNSLDFaxID
    {
        get
        {
            return Buffer.GetInt64(BufferColumnIndexes[3]);
        }
    }
    public bool DTPCNSLDFaxID_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String NPI
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool NPI_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public DateTime CampaignDate
    {
        get
        {
            return Buffer.GetDate(BufferColumnIndexes[5]);
        }
    }
    public bool CampaignDate_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public String LastStatus
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
    }
    public bool LastStatus_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_9a5698b569d546cb8e212af1c399891a</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_9a5698b569d546cb8e212af1c399891a</msb:DisplayName>
    <msb:ProjectId>{222FA1EC-64CD-481A-803C-C5ED42BA4961}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_9a5698b569d546cb8e212af1c399891a.csproj" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="PhaxioAPI.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_9a5698b569d546cb8e212af1c399891a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_9a5698b569d546cb8e212af1c399891a")]
[assembly: AssemblyCopyright("Copyright @  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[PhaxioAPI.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Web.Script.Serialization;
//using System.Dynamic;
//using System.Collections.ObjectModel;
using Microsoft.CSharp.RuntimeBinder;

namespace Phaxio
{
    public class PhaxioAPI
    {
        private bool debug = false;
        private string api_key;
        private string api_secret;
        private string host;

        public PhaxioAPI() { }

        public PhaxioAPI(string apiKey, string apiSecret, string hostURL = "https://api.phaxio.com/v1/")
        {
            api_key = apiKey;
            api_secret = apiSecret;
            host = hostURL;
        }

        public PhaxioOperationResult faxStatus(int faxId)
        {
            if (faxId == 0)
                return new PhaxioOperationResult(false, "A valid fax id is required.");
            NameValueCollection parameters = new NameValueCollection();
            parameters.Add("id", faxId.ToString());
            return doRequest(host + "faxStatus", parameters);
        }

        public PhaxioOperationResult sendFax(string address, NameValueCollection parameters)
        {
            //if ((parameters["fax[to_number]"] == null) || (parameters["fax[to_number]"].Length == 0))
            //    return new PhaxioOperationResult(false, "You must include a 'to fax number' number.");

            //if (parameters["fax[filename]"] == null && (parameters["fax[filename]"].Length == 0))
            //    return new PhaxioOperationResult(false, "You must include a file.");

            //if (parameters["fax[filename]"] != null)
            //    if (!File.Exists(parameters["fax[filename]"]))
            //    {
            //        return new PhaxioOperationResult(false, System.String.Format("The file '{0}' does not exist.", parameters["fax[filename]"]));
            //    }

            return doRequest(address, parameters); //Changed
        }

        //public PhaxioOperationResult sendFax(string[] to, string[] filenames, Dictionary<string, string> options)
        //{
        //    if ((to == null) || (to.Length == 0))
        //        return new PhaxioOperationResult(false, "You must include a 'to' number.");

        //    if (filenames == null && !options.ContainsKey("string_data"))
        //        return new PhaxioOperationResult(false, "You must include a file.");

        //    NameValueCollection parameters = new NameValueCollection();

        //    for (int i = 0; i < to.Length; i++)
        //    {
        //        parameters.Add(System.String.Format("to[{0}]", i), to[i]);
        //    }
        //    if (filenames != null)
        //        for (int i = 0; i < filenames.Length; i++)
        //        {
        //            if (!File.Exists(@filenames[i]))
        //            {
        //                return new PhaxioOperationResult(false, System.String.Format("The file '{0}' does not exist.", filenames[i]));
        //            }
        //            parameters.Add(System.String.Format("filename[{0}]", i), filenames[i]);
        //        }
        //    string[] validOptionNames = new string[]{
        //        "string_data",
        //        "string_data_type",
        //        "batch",
        //        "batch_delay",
        //        "batch_collision!avoidance",
        //        "callback_url",
        //        "cancel_timeout",
        //        "caller_id"};
        //    copyValidOptionsToParameters(validOptionNames, options, parameters);

        //    return doRequest(host, parameters); //Changed
        //}

        //public PhaxioOperationResult fireBatch(int batchId){
        //    if(batchId==0)
        //        return new PhaxioOperationResult(false, "You need to include a batch Id.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("id",batchId.ToString());
        //    return doRequest(host+"fireBatch",parameters);
        //}

        //public PhaxioOperationResult closeBatch(int batchId){
        //    if(batchId==0)
        //        return new PhaxioOperationResult(false, "You need to include a batch Id.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("id",batchId.ToString());
        //    return doRequest(host+"closeBatch",parameters);
        //}

        //public string getApiKey()
        //{
        //    return api_key;
        //}

        //public string getApiSecret()
        //{
        //    return api_secret;
        //}

        //public PhaxioOperationResult provisionNumber(int areaCode, string callbackURL = "")
        //{
        //    if (areaCode == 0)
        //        return new PhaxioOperationResult(false, "Area Code is required.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("area_code", areaCode.ToString());
        //    if (callbackURL != "")
        //    {
        //        parameters.Add("callback_url", callbackURL);
        //    }
        //    return doRequest(host + "provisionNumber", parameters);
        //}

        //public PhaxioOperationResult releaseNumber(string number)
        //{
        //    if (number == "")
        //    {
        //        return new PhaxioOperationResult(false, "A fax number is required.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("number", number);
        //    return doRequest(host + "releaseNumber", parameters);
        //}

        //public PhaxioOperationResult numberList(Dictionary<string, string> options = null)
        //{
        //    NameValueCollection parameters = new NameValueCollection();
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "area_code", "number" }, options, parameters);
        //    }
        //    return doRequest(host + "numberList", parameters);
        //}

        //public PhaxioOperationResult accountStatus()
        //{
        //    NameValueCollection parameters = new NameValueCollection();
        //    return doRequest(host + "accountStatus", parameters);
        //}

        //public PhaxioOperationResult testReceive(string filename, Dictionary<string, string> options = null)
        //{
        //    if (filename == null || filename == "" || !File.Exists(@filename) || Path.GetExtension(filename) != ".pdf")
        //    {
        //        return new PhaxioOperationResult(false, "You must specify a valid pdf file.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("filename", filename);
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "from_number", "to_number" }, options, parameters);
        //    }
        //    return doRequest(host + "testReceive", parameters);
        //}

        //public PhaxioOperationResult attachPhaxCode(float x, float y, string filename, Dictionary<string, string> options = null)
        //{
        //    if (filename == null || filename == "" || !File.Exists(@filename) || Path.GetExtension(filename) != ".pdf")
        //    {
        //        return new PhaxioOperationResult(false, "You must specify a valid pdf file.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("filename", filename);
        //    parameters.Add("x", x.ToString());
        //    parameters.Add("y", y.ToString());
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "metadata", "page_number" }, options, parameters);
        //    }
        //    return doRequest(host + "attachPhaxCodeToPdf", parameters);
        //}

        //public PhaxioOperationResult createPhaxCode(Dictionary<string, string> options = null)
        //{
        //    NameValueCollection parameters = new NameValueCollection();
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "metadata", "redirect" }, options, parameters);
        //    }
        //    return doRequest(host + "createPhaxCode", parameters);
        //}

        //public PhaxioOperationResult getHostedDocument(string name, string metadata = null)
        //{
        //    if (name == null || name == "")
        //    {
        //        return new PhaxioOperationResult(false, "You must include a document name.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    if (metadata != null || metadata != "")
        //    {
        //        parameters.Add("metadata", metadata);
        //    }
        //    return doRequest(host + "getHostedDocument", parameters);
        //}

        //public PhaxioOperationResult faxFile(int id, string type = "p")
        //{
        //    if (id == 0)
        //    {
        //        return new PhaxioOperationResult(false, "A fax id is required.");
        //    }
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("id", id.ToString());
        //    parameters.Add("type", type);
        //    return doRequest(host + "faxFile", parameters);
        //}

        //public PhaxioOperationResult faxList(string start, string end, Dictionary<string, string> options = null)
        //{
        //    if (start == null || start == "" || end == "" || end == null)
        //        return new PhaxioOperationResult(false, "Start and end timestamps are required.");
        //    NameValueCollection parameters = new NameValueCollection();
        //    parameters.Add("start", start);
        //    parameters.Add("end", end);
        //    if (options != null)
        //    {
        //        copyValidOptionsToParameters(new string[] { "page", "max_per_page" }, options, parameters);
        //    }
        //    return doRequest(host + "faxList", parameters);
        //}

        private PhaxioOperationResult doRequest(string address, NameValueCollection parameters)
        {
            //parameters.Add("api_key", api_key);
            //parameters.Add("api_secret", api_secret);
            //if (debug)
            //    Console.WriteLine("Request address: \n\n {0}?{1}", address, ToString(parameters));

            var response = createAndSendRequest(address, parameters);
            if (!response.Success)
            {
                //if (debug)
                //    Console.WriteLine("Failed in createAndSendRequest: \n\n{0}\n\n", response.Message);

                return response;
            }

            //if (debug)
            //    Console.WriteLine("Response message: \n\n{0}\n\n", response.Message);

            JavaScriptSerializer responsed = new JavaScriptSerializer();
            dynamic res;
            try
            {
                res = responsed.Deserialize<dynamic>(response.Message);
            }
            catch
            {
                return new PhaxioOperationResult(false, "No data received from service.");
            }

            string sresMessage = "";
            string sStatus = "";
            string sErrorCode = "";
            string sErrorType = "";

            if (res.ContainsKey("message"))
                sresMessage = CheckNullString(res["message"]);

            if (res.ContainsKey("status"))
                sStatus = CheckNullString(res["status"]);

            if (res.ContainsKey("error_code"))
                sErrorCode = CheckNullString(res["error_code"]);

            if (res.ContainsKey("error_type"))
                sErrorType = CheckNullString(res["error_type"]);

            //object[] objRecipients = null;
            //dynamic dynRecipients = null;

            //if (res.ContainsKey("recipients"))
            //{
            //    objRecipients = res["recipients"];
            //    dynRecipients = objRecipients[0];

            //    if (dynRecipients.ContainsKey("error_code"))
            //        sErrorCode = sErrorCode + CheckNullString(dynRecipients["error_code"]);

            //    if (dynRecipients.ContainsKey("error_type"))
            //        sErrorType = sErrorType + CheckNullString(dynRecipients["error_type"]);
            //}

            Dictionary<string, object> resdata = new Dictionary<string, object>();
            resdata.Add("status", sStatus.Trim());
            resdata.Add("error_code", sErrorCode.Trim());
            resdata.Add("error_type", sErrorType.Trim());

            return new PhaxioOperationResult(true, sresMessage, resdata);
        }

        private string CheckNullString(object Value)
        {
            string strValue = "";
            if (Value != null)
                strValue = Value.ToString();

            return strValue;
        }        

        private string ToString(NameValueCollection source)
        {
            var str = new StringBuilder();
            foreach (KeyValuePair<string, string> kv in source)
                str.Append(string.Format("{0}{1}{2}{3}", kv.Key, '=', kv.Value, '&'));
            var retval = str.ToString();
            return retval.Substring(0, retval.Length - 1);
        }

        //private void copyValidOptionsToParameters(string[] validParameterNames, Dictionary<string, string> options, NameValueCollection parameters)
        //{
        //    foreach (string name in validParameterNames)
        //    {
        //        if (options.ContainsKey(name))
        //        {
        //            parameters.Add(name, options[name]);
        //        }
        //    }
        //}

        private PhaxioOperationResult createAndSendRequest(string url, NameValueCollection parameters)
        {
            string boundary = "---------------------------" + getSHA(DateTime.Now.Ticks.ToString("x"));
            byte[] boundarybytes = System.Text.Encoding.ASCII.GetBytes("\r\n--" + boundary + "\r\n");

            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
            webRequest.ContentType = "multipart/form-data; boundary=" + boundary;
            webRequest.Method = "POST";
            webRequest.KeepAlive = true;
            webRequest.Credentials = System.Net.CredentialCache.DefaultCredentials;

            Stream requestStream = webRequest.GetRequestStream();

            string formdataTemplate = "Content-Disposition: form-data; name=\"{0}\"\r\n\r\n{1}";
            string headerTemplate = "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: application/octet-stream\r\n\r\n";
            foreach (string key in parameters.Keys)
            {
                requestStream.Write(boundarybytes, 0, boundarybytes.Length);
                if (key.Contains("filename")) //Changed
                {
                    string header = string.Format(headerTemplate, key, parameters[key]);
                    byte[] headerbytes = System.Text.Encoding.UTF8.GetBytes(header);
                    requestStream.Write(headerbytes, 0, headerbytes.Length);
                    FileStream fileStream = new FileStream(parameters[key], FileMode.Open, FileAccess.Read);
                    byte[] buffer = new byte[4096];
                    int bytesRead = 0;
                    while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)
                    {
                        requestStream.Write(buffer, 0, bytesRead);
                    }
                    fileStream.Close();
                }
                else
                {

                    string formitem = string.Format(formdataTemplate, key, parameters[key]);
                    byte[] formitembytes = System.Text.Encoding.UTF8.GetBytes(formitem);
                    requestStream.Write(formitembytes, 0, formitembytes.Length);
                }
            }
            byte[] trailer = System.Text.Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");
            requestStream.Write(trailer, 0, trailer.Length);
            requestStream.Close();

            WebResponse webResponse = null;
            try
            {
                webResponse = webRequest.GetResponse();
                Stream stream2 = webResponse.GetResponseStream();
                StreamReader reader2 = new StreamReader(stream2);
                string message = reader2.ReadToEnd();
                webResponse.Close();
                webResponse = null;
                webRequest = null;
                return new PhaxioOperationResult(true, message);
            }
            catch (Exception ex)
            {
                if (webResponse != null)
                {
                    webResponse.Close();
                    webResponse = null;
                }
                webRequest = null;
                return new PhaxioOperationResult(false, ex.ToString());
            }
        }

        private string getSHA(string data)
        {
            SHA1 temp = new SHA1CryptoServiceProvider();
            UnicodeEncoding UE = new UnicodeEncoding();
            byte[] hash = temp.ComputeHash(UE.GetBytes(data));
            string result = "";
            foreach (var b in hash)
                result += b.ToString("X2");
            return result;
        }

    }

    public class PhaxioOperationResult
    {
        public PhaxioOperationResult(bool success, string message, Dictionary<string, object> data = null)
        {
            Success = success;
            Message = message;
            Data = data;
        }

        public bool Success { get; set; }

        public string Message { get; set; }

        public Dictionary<string, object> Data { get; set; }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_9a5698b569d546cb8e212af1c399891a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_9a5698b569d546cb8e212af1c399891a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_9a5698b569d546cb8e212af1c399891a.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
AAAGAgUoQAAABioeAnsQAAAEKiICA30QAAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9
EgAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAACwPAAAjfgAAmA8AALAS
AAAjU3RyaW5ncwAAAABIIgAAQAsAACNVUwCILQAAEAAAACNHVUlEAAAAmC0AANQFAAAjQmxvYgAA
AAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAABdAAAACwAAACYAAABAAAAALgAAAIoAAAACAAAA
GgAAAAgAAAAGAAAAHAAAACAAAAAKAAAAAQAAAAoAAAABAAAAAQAAAAEAAAAAAFsIAQAAAAAABgBG
Bm4NBgDaBm4NBgCSBVsNDwDiDQAABgC/BUEKBgApBkEKBgAKBkEKBgDBBkEKBgBmBkEKBgB/BkEK
BgDWBUEKBgDxBV0HCgCaBiUEDgBmAK0MEgDRCrMQEgAKA7MQEgAKDbMQBgBKEH8JFgBTCogCBgAc
BH8JBgDfCn8JCgBiDCUEGgBTDCUECgBWCyUECgDnECUEBgB1BVsNBgBzDI4NBgAiCwAKFgAvBUUI
FgCmBUUIFgDRBOsJBgBaBW4NHgAXDRUKBgADAV4CBgAKDJkRBgA0DTIPBgD0AF4CBgCGA38JFgAo
EVEQBgBmCe4BFgDpBFEQBgA/Ce4BBgBNB5kRIgDUAG4NBgA+AX8JIgBLBW4NBgAfAX8JEgBGBBwC
EgCHCrMQFgCZDFEQFgBQBFEQBgCTB38JBgAxAX8JBgCTEu4BBgBBC+4BBgDlA+4BFgAhEhMPEgD+
DOkKEgAAA+kKBgCDCH8JBgD8Cn8JJgABANUMJgAqANUMJgBNANUMDgB/AK0MDgAaAK0MZwC5EQAA
DgCQAK0MBgB/BH8JBgCSA38JBgB0EkEKBgDnAH8JKgAuCxgMKgBkDhgMKgA/DBgMIgA3DG4NKgB8
DhgMIgBlBPsOBgDGAF4CFgC4BIgCBgDGC38JBgBUB5kRFgAsEVEQFgBvA1EQFgChDlEQQwGeCgAA
BgBGA+4BBgCFD+4BBgAPB38JBgDYC+4BBgDlC+4BBgDwC1MSBgCGCVMSAAAAAKABAAAAAAEAAQAB
ABAAyQkAABAAAQABAAEAEABGDAAAWQAFAAsAAQAQAMkQAABlAAUAHAABABAAXw8AAEkABwAgAAEA
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
uQAgBQUBsQAIEgsBsQB4EAsByQBODQYAoQHVDg8ByQBTDhcBkQBODQYAyQA6Ah0B8QFnCiMB+QEB
BCkBAQKDDDAByQAgDjUBCQJ2CTsByQDUEUIBEQKlEUgBKQKkA08BKQJwElgB2QBODV4B+QBODQYA
QQKHB4UACQFODQYACQFBB4EBSQIoBYwBWQLcCZYBFAAoBb0BFABcEMoBWQLLC84BHAAoBb0BHABc
EMoBJAB/AwgCLAB/Ax4CWQIgEScCNAAoBb0BNABcEMoBPAAoBb0BPABcEMoBWQIYElgCRAB/AwgC
TAB/Ax4CDABODQYAoQGUCYUADACEAoQCGQFODQYAgQJADaACIQH3EKYCVAA8ErICVAAUB7cCoQFD
ELwCGQEVA8MCIQGQEQsBMQEHBQYAoQDpEfgCoQCXDv0CqQGHB3MAkQLKAQEDkQI2DgcDmQIoBQ0D
mQJ0BBAAmQIcAxAAOQEuBxQDoQK+DhkDmQKuDh8DmQJcCSYDgQIzECwDsQJADaACQQFUBTIDoQHc
DjoDoQFDED8DkQJ6AQEDUQFODUYDQQF/AlEDQQEBBQYAmQL1BFkDSQFKCSYD0QJODV8D2QL2AoUA
SQEBBQYA4QJODQYAWQFODQYA6QKqB3EDyQKHB3MADgB5AJwDEgCtANEDLgALAA4FLgATABcFLgAb
ADYFLgAjAD8FLgArAGgFLgAzAGgFLgA7AGgFLgBDAD8FLgBLAG4FLgBTAGgFLgBbAIUFQwBjAM8F
4wBrAM8FYQF7AM8FYwF7AM8FAQJ7AM8FIQJ7AM8FQQJ7AM8F6QJzADYFCQNzADYFYAd7AM8FgAd7
AM8FoAd7AM8FwAd7AM8F4Ad7AM8FAAh7AM8FJQBOAL8AZgFrAYwCygJmAwMAAQAFAA8ABgAQAAcA
FwAIABkACgAaAAAArgnfBAAA+gjjBAAAnQnfBAAA4gjjBAAA7gPfBAAAtgjjBAAAvAHnBAAAjgjj
BAAA4gHfBAAApwjjBAAAEwXrBAAAygjjBAAADBDfBAAAFAnjBAAAEQvwBAAABAjfBAAALQjfBAAA
KxLfBAAAxg/fBAAA3w/fBAAAugffBAAA0QffBAAAcwz1BAAAsAT6BAAAiBD/BAAAoA/jBAAAXwPf
BAAASwIEBQIADAADAAIADQAFAAIADgAHAAIADwAJAAIAEAALAAIAEQANAAIAEgAPAAIAEwARAAIA
FAATAAIAFQAVAAIAFgAXAAIAFwAZAAIAGAAbAAIAGQAdAAIAIQAfAAIAIwAhAAIAJAAjAAIAJQAl
AAIAJgAnAAIAJwApAAIAKAArAAIAKQAtAAIAKwAvAAIALAAxAAEALQAxAAIALgAzAAIAOwA1AAEA
PAA1AAIAPQA3AAEAPgA3AAIAPwA5AAEAQAA5AMoArQHrAfwBEwI2AkYCbAJ5AqoCBIAAAAEAAAAA
AAAAAAAAAAAA+AEAAAQAAAAAAAAAAAAAAHgDVQIAAAAADgAAAAAAAAAAAAAAgQMDEQAAAAAOAAAA
AAAAAAAAAACBA24LAAAAAAQAAAAAAAAAAAAAAHgDHAIAAAAABAAAAAAAAAAAAAAAeAN/CQAAAAAO
AAAAAAAAAAAAAACBA1YRAAAAAAQAAAAAAAAAAAAAAIoD5Q4AAAAABAAAAAAAAAAAAAAAeAOEBAAA
AAAOAAAAAAAAAAAAAACBA5ELAAAAAAQAAAAAAAAAAAAAAJMDtQsAAAAAAAAAAAEAAACfDQAACwAJ
AJ8AiAEAAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTVmFyaWFibGUxMDAASURUU1J1
bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABJRFRTUnVudGltZUNvbm5lY3Rpb24xMDAASURU
U0Nvbm5lY3Rpb25NYW5hZ2VyMTAwAElEVFNWYXJpYWJsZXMxMDAASURUU0V2YWx1YXRvckNvbnRl
eHQxMDAAPD5wX18xMAA8PnBfXzAAPD5wX18xMQA8PnBfXzEASUVudW1lcmFibGVgMQBDYWxsU2l0
ZWAxADw+cF9fMTIASW50MzIAPD5wX18yAEtleVZhbHVlUGFpcmAyAERpY3Rpb25hcnlgMgA8PnBf
XzEzADw+cF9fMwBGdW5jYDMAPD5wX18xNABHZXRJbnQ2NAA8PnBfXzQARnVuY2A0ADw+cF9fMTUA
PD5wX181ADw+cF9fMTYAPD5wX182ADw+cF9fMTcAPD5wX183ADw+cF9fMTgAZ2V0X1VURjgAPD5v
X184ADw+cF9fOAA8PnBfXzE5ADw+cF9fOQA8TW9kdWxlPgBnZXRTSEEASW5wdXRJRABnZXRfRFRQ
Q05TTERGYXhJRABnZXRfQVNDSUkAUGhheGlvQVBJAGdldF9OUEkAaG9zdFVSTABTeXN0ZW0uSU8A
U0NfOWE1Njk4YjU2OWQ1NDZjYjhlMjEyYWYxYzM5OTg5MWEAU3lzdGVtLkRhdGEAZ2V0X0RhdGEA
c2V0X0RhdGEAZ2V0X0NvbXBvbmVudE1ldGFEYXRhAGRhdGEAbXNjb3JsaWIAU3lzdGVtLkNvbGxl
Y3Rpb25zLkdlbmVyaWMAZmF4SWQAUmVhZABBZGQAU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxp
emVkADxEYXRhPmtfX0JhY2tpbmdGaWVsZAA8TWVzc2FnZT5rX19CYWNraW5nRmllbGQAPFN1Y2Nl
c3M+a19fQmFja2luZ0ZpZWxkAHNxbENtZABSZWFkVG9FbmQARGJDb21tYW5kAFNxbENvbW1hbmQA
QXBwZW5kAHNldF9NZXRob2QAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UAc291cmNlAEZpbGVNb2Rl
AGdldF9NZXNzYWdlAHNldF9NZXNzYWdlAG1lc3NhZ2UAQ3JlZGVudGlhbENhY2hlAEludm9rZQBJ
RGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBWYWxpZGF0aW9u
QW5kQXJjaGl2ZUZpbGUAVXBkYXRlU3RhdHVzYW5kQXJjaGl2ZUZpbGUAZ2V0X0ZpbGVOYW1lAElu
cHV0TmFtZQBHZXRSdW50aW1lQ29ubmVjdGlvbkJ5TmFtZQBEYXRlVGltZQBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5QaXBlbGluZQBTcWxEYlR5cGUAU2VjdXJpdHlQcm90b2NvbFR5cGUARXhwcmVz
c2lvblR5cGUAc2V0X0NvbnRlbnRUeXBlAFN5c3RlbS5Db3JlAGdldF9DdWx0dXJlAHNldF9DdWx0
dXJlAHJlc291cmNlQ3VsdHVyZQBOYW1lT2JqZWN0Q29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAQ2xvc2UARGlzcG9zZQBnZXRfQ2Ft
cGFpZ25EYXRlAEdldERhdGUAQ3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAERlbGV0ZQBDYWxs
U2l0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRD
b21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50
aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAEJ5dGUAZ2V0
X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBzZXRfS2VlcEFsaXZlAE1vdmUARGVzZXJpYWxpemUAVW5p
Y29kZUVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQ2hlY2tOdWxsU3RyaW5nAFRv
U3RyaW5nAEdldFN0cmluZwBTdWJzdHJpbmcAZGVidWcAQ29tcHV0ZUhhc2gAZ2V0X0ZheE5vdFZl
cmlmaWVkUGF0aABnZXRfRmF4U2VuZFBhdGgAU291cmNlRmlsZVBhdGgARGVzdGluYXRpb25GaWxl
UGF0aABnZXRfRmF4QXJjaGl2ZVBhdGgARGVzdGluYXRpb25Gb2xkZXJQYXRoAGdldF9GYXhFcnJv
clBhdGgAZ2V0X0xlbmd0aABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfOWE1Njk4YjU2OWQ1NDZj
YjhlMjEyYWYxYzM5OTg5MWEuZGxsAERCTnVsbABnZXRfRFRQQ05TTERGYXhJRF9Jc051bGwAZ2V0
X05QSV9Jc051bGwAZ2V0X0ZpbGVOYW1lX0lzTnVsbABnZXRfQ2FtcGFpZ25EYXRlX0lzTnVsbABn
ZXRfU2VuZGVyRmF4TnVtX0lzTnVsbABnZXRfUmVjZWl2ZXJGYXhOdW1fSXNOdWxsAGdldF9MYXN0
U3RhdHVzX0lzTnVsbABzZXRfU2VjdXJpdHlQcm90b2NvbAB1cmwARmlsZVN0cmVhbQBHZXRSZXNw
b25zZVN0cmVhbQBHZXRSZXF1ZXN0U3RyZWFtAHNxbFBhcmFtAGdldF9JdGVtAFN5c3RlbQBIYXNo
QWxnb3JpdGhtAFRyaW0AZ2V0X1NlbmRlckZheE51bQBnZXRfUmVjZWl2ZXJGYXhOdW0AcmVzb3Vy
Y2VNYW4AU2NyaXB0TWFpbgBzcWxDb25uAFVuYXJ5T3BlcmF0aW9uAFN5c3RlbS5Db25maWd1cmF0
aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5XZWIuU2NyaXB0LlNlcmlhbGl6YXRpb24A
VHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24ATmFtZVZhbHVlQ29sbGVjdGlvbgBnZXRfUnVu
dGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24AS2V5c0NvbGxl
Y3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AUmVsZWFzZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBF
eGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAFN0cmluZ0NvbXBhcmlzb24AZ2V0X1N0YXJzQ2Fs
bExpc3RhZG8AQ3VsdHVyZUluZm8AQ1NoYXJwQXJndW1lbnRJbmZvAERpcmVjdG9yeUluZm8AUGhh
eGlvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGlt
ZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAATWljcm9zb2Z0LkNTaGFy
cABDaGFyAEludm9rZU1lbWJlcgBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBTSEExQ3J5cHRvU2Vy
dmljZVByb3ZpZGVyAFN0cmluZ0J1aWxkZXIATWljcm9zb2Z0LkNTaGFycC5SdW50aW1lQmluZGVy
AENhbGxTaXRlQmluZGVyAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIA
Z2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ29ubmVjdGlvbk1hbmFnZXIAU2VydmljZVBvaW50TWFu
YWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgBEYlBhcmFtZXRlcgBTcWxQYXJhbWV0ZXIASmF2
YVNjcmlwdFNlcmlhbGl6ZXIAY29ubk1ncgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9y
AC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNl
cwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzlhNTY5OGI1NjlkNTQ2Y2I4ZTIxMmFmMWMzOTk4OTFhLlBy
b3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ185YTU2OThiNTY5
ZDU0NmNiOGUyMTJhZjFjMzk5ODkxYS5Qcm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwBH
ZXRCeXRlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAQ1NoYXJwQXJndW1l
bnRJbmZvRmxhZ3MAQ1NoYXJwQmluZGVyRmxhZ3MAU2V0dGluZ3MAZ2V0X1RpY2tzAElDcmVkZW50
aWFscwBzZXRfQ3JlZGVudGlhbHMAZ2V0X0RlZmF1bHRDcmVkZW50aWFscwBFcXVhbHMAQ29udGFp
bnMAU3lzdGVtLldlYi5FeHRlbnNpb25zAFN5c3RlbS5MaW5xLkV4cHJlc3Npb25zAFN5c3RlbS5U
ZXh0LlJlZ3VsYXJFeHByZXNzaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAQWNxdWlyZUNvbm5lY3Rp
b25zAFJlbGVhc2VDb25uZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBwYXJhbWV0ZXJzAEZpbGVBY2Nl
c3MAZ2V0X1N1Y2Nlc3MAc2V0X1N1Y2Nlc3MAc3VjY2VzcwBWYWxpZGF0aW9uUHJvY2VzcwBnZXRf
RmF4aW1pbmlvbkdldEFkZHJlc3MAZ2V0X0ZheGltaW5pb25UcmFuc21pdEFkZHJlc3MAYWRkcmVz
cwBFeGlzdHMAZ2V0X0xhc3RTdGF0dXMAZmF4U3RhdHVzAFVwZGF0ZVJldHJ5U3RhdHVzAGdldF9L
ZXlzAENvbmNhdABGb3JtYXQAT2JqZWN0AFN5c3RlbS5OZXQAVGFyZ2V0AGFwaVNlY3JldABhcGlf
c2VjcmV0AEVuZE9mUm93c2V0AGdldF9EZWZhdWx0AFBoYXhpb09wZXJhdGlvblJlc3VsdABQaGF4
aW9SZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9u
ZW50AFNjcmlwdENvbXBvbmVudABnZXRfQ3VycmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2Ny
aXB0AENvbnZlcnQASHR0cFdlYlJlcXVlc3QAY3JlYXRlQW5kU2VuZFJlcXVlc3QAZG9SZXF1ZXN0
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AGhvc3QASW5wdXQwX1Byb2Nlc3NJbnB1
dABNb3ZlTmV4dABTeXN0ZW0uVGV4dABHZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlwdENvbXBvbmVu
dEV2YWxDb250ZXh0AGdldF9FdmFsdWF0b3JDb250ZXh0AGdldF9Ob3cASW5wdXQwX1Byb2Nlc3NJ
bnB1dFJvdwBOZXh0Um93AHNlbmRGYXgAR2V0SW5kZXgAUmVnZXgAZ2V0X0ZheGltaW5pb25BUElL
ZXkAZ2V0X0tleQBhcGlLZXkAYXBpX2tleQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5AGdl
dF9Bc3NlbWJseQBFeGVjdXRlTm9uUXVlcnkAQ3JlYXRlRGlyZWN0b3J5AG9wX0VxdWFsaXR5AEVt
cHR5AAAAge91AHAAZABhAHQAZQAgAFsAZABiAG8AXQAuAFsARABUAFAAXwBDAE4AUwBMAEQAXwBG
AGEAeABfAEwAaQBzAHQAXQAgAHMAZQB0ACAAIABbAEYAYQB4AFMAZQBuAGQASQBuAGQAXQAgAD0A
IABAAEYAYQB4AFMAZQBuAGQASQBuAGQALAAgAEYAYQB4AFMAZQBuAGQARABhAHQAZQAgAD0AIABn
AGUAdABkAGEAdABlACgAKQAsACAAWwBMAGEAcwB0AFMAdABhAHQAdQBzAF0APQAgAEAATABhAHMA
dABTAHQAYQB0AHUAcwAsACAAWwBSAGUAcwBwAG8AbgBzAGUATQBlAHMAcwBhAGcAZQBdAD0AIABA
AFIAZQBzAHAAbwBuAHMAZQBNAGUAcwBzAGEAZwBlACwAIABFAHIAcgBvAHIAQwBvAGQAZQAgAD0A
IABAAEUAcgByAG8AcgBDAG8AZABlACwAIABFAHIAcgBvAHIAVAB5AHAAZQAgAD0AIABAAEUAcgBy
AG8AcgBUAHkAcABlACAAdwBoAGUAcgBlACAAWwBEAFQAUABfAEMATgBTAEwARABfAEYAYQB4AF8A
SQBEAF0AIAA9ACAAQABEAFQAUABfAEMATgBTAEwARABfAEYAYQB4AF8ASQBEAAAjQABEAFQAUABf
AEMATgBTAEwARABfAEYAYQB4AF8ASQBEAAAXQABGAGEAeABTAGUAbgBkAEkAbgBkAAAXQABMAGEA
cwB0AFMAdABhAHQAdQBzAAAhQABSAGUAcwBwAG8AbgBzAGUATQBlAHMAcwBhAGcAZQAAFUAARQBy
AHIAbwByAEMAbwBkAGUAABVAAEUAcgByAG8AcgBUAHkAcABlAAAJLgBwAGQAZgAAFU0ATQAtAGQA
ZAAtAHkAeQB5AHkAAQNcAAAhZgBhAHgAWwBmAHIAbwBtAF8AbgB1AG0AYgBlAHIAXQAAHWYAYQB4
AFsAdABvAF8AbgB1AG0AYgBlAHIAXQAAHWYAYQB4AFsAYwBsAGkAZQBuAHQAXwBpAGQAXQAAG2YA
YQB4AFsAZgBpAGwAZQBuAGEAbQBlAF0AABljAGEAbABsAGIAYQBjAGsAXwB1AHIAbAAANWgAdAB0
AHAAOgAvAC8AdABlAHMAdAAuAGwAbwBjAGEAbAAvAGMAYQBsAGwAYgBhAGMAawAAD2EAcABpAF8A
awBlAHkAAA1mAG8AcgBtAGEAdAAACWoAcwBvAG4AABVTAGUAbgB0AEIAZQBmAG8AcgBlAAAXTgBv
AHQAVgBlAHIAaQBmAGkAZQBkAABRWQBvAHUAIABtAHUAcwB0ACAAaQBuAGMAbAB1AGQAZQAgAGEA
IAB0AG8AIABmAGEAeAAgAG4AdQBtAGIAZQByACAAbgB1AG0AYgBlAHIALgAADVsAXgAwAC0AOQBd
AAE1VABvACAAZgBhAHgAIABuAHUAbQBiAGUAcgAgAGkAcwAgAG4AbwB0ACAAdgBhAGwAaQBkAAAx
WQBvAHUAIABtAHUAcwB0ACAAaQBuAGMAbAB1AGQAZQAgAGEAIABmAGkAbABlAC4AAD1UAGgAZQAg
AGYAaQBsAGUAIAAnAHsAMAB9ACcAIABkAG8AZQBzACAAbgBvAHQAIABlAHgAaQBzAHQALgABMVYA
YQBsAGkAZABhAHQAaQBvAG4AIABpAHMAIABzAHUAYwBjAGUAcwBzAGYAdQBsAAAPZgBhAGkAbAB1
AHIAZQAAA04AACNWAGEAbABpAGQAYQB0AGkAbwBuACAAZgBhAGkAbABlAGQAAANZAAANcwB0AGEA
dAB1AHMAABVlAHIAcgBvAHIAXwBjAG8AZABlAAAVZQByAHIAbwByAF8AdAB5AHAAZQAAC3IAZQB0
AHIAeQAAgJNBAG4AIABlAHIAcgBvAHIAIABoAGEAcwAgAG8AYwBjAHUAcgByAGUAZAAgAHcAaABp
AGwAZQAgAHUAcABsAG8AYQBkAGkAbgBnACAAZgBhAHgAIABkAG8AYwB1AG0AZQBuAHQAIAB2AGkA
YQAgAHQAaABlACAAZgBhAHgAaQBtAGkAbgBpAG8AbgAgAEEAUABJAACAl0EAbgAgAGUAcgByAG8A
cgAgAGgAYQBzACAAbwBjAGMAdQByAHIAZQBkACAAdwBoAGkAbABlACAAdQBwAGwAbwBhAGQAaQBu
AGcAIABhACAAZgBhAHgAIABkAG8AYwB1AG0AZQBuAHQAIAB2AGkAYQAgAHQAaABlACAAZgBhAHgA
aQBtAGkAbgBpAG8AbgAgAEEAUABJAAAPSQBuAHAAdQB0ACAAMAAAJ1MAdABhAHIAcwBfAEMAYQBs
AGwAXwBMAGkAcwB0AF8AYQBkAG8AAB1GAGEAeABBAHIAYwBoAGkAdgBlAFAAYQB0AGgAABlGAGEA
eABFAHIAcgBvAHIAUABhAHQAaAAAIUYAYQB4AGkAbQBpAG4AaQBvAG4AQQBQAEkASwBlAHkAAClG
AGEAeABpAG0AaQBuAGkAbwBuAEcAZQB0AEEAZABkAHIAZQBzAHMAADNGAGEAeABpAG0AaQBuAGkA
bwBuAFQAcgBhAG4AcwBtAGkAdABBAGQAZAByAGUAcwBzAAAlRgBhAHgATgBvAHQAVgBlAHIAaQBm
AGkAZQBkAFAAYQB0AGgAABdGAGEAeABTAGUAbgBkAFAAYQB0AGgAAHFTAEMAXwA5AGEANQA2ADkA
OABiADUANgA5AGQANQA0ADYAYwBiADgAZQAyADEAMgBhAGYAMQBjADMAOQA5ADgAOQAxAGEALgBQ
AHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAADdBACAAdgBhAGwAaQBkACAA
ZgBhAHgAIABpAGQAIABpAHMAIAByAGUAcQB1AGkAcgBlAGQALgAABWkAZAAAE2YAYQB4AFMAdABh
AHQAdQBzAAA9TgBvACAAZABhAHQAYQAgAHIAZQBjAGUAaQB2AGUAZAAgAGYAcgBvAG0AIABzAGUA
cgB2AGkAYwBlAC4AAAEAF0MAbwBuAHQAYQBpAG4AcwBLAGUAeQAAD20AZQBzAHMAYQBnAGUAAB9D
AGgAZQBjAGsATgB1AGwAbABTAHQAcgBpAG4AZwAAGXsAMAB9AHsAMQB9AHsAMgB9AHsAMwB9AAA3
LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0AAQN4
AAAJDQAKAC0ALQABBQ0ACgAAPW0AdQBsAHQAaQBwAGEAcgB0AC8AZgBvAHIAbQAtAGQAYQB0AGEA
OwAgAGIAbwB1AG4AZABhAHIAeQA9AAEJUABPAFMAVAAAY0MAbwBuAHQAZQBuAHQALQBEAGkAcwBw
AG8AcwBpAHQAaQBvAG4AOgAgAGYAbwByAG0ALQBkAGEAdABhADsAIABuAGEAbQBlAD0AIgB7ADAA
fQAiAA0ACgANAAoAewAxAH0AAYDNQwBvAG4AdABlAG4AdAAtAEQAaQBzAHAAbwBzAGkAdABpAG8A
bgA6ACAAZgBvAHIAbQAtAGQAYQB0AGEAOwAgAG4AYQBtAGUAPQAiAHsAMAB9ACIAOwAgAGYAaQBs
AGUAbgBhAG0AZQA9ACIAewAxAH0AIgANAAoAQwBvAG4AdABlAG4AdAAtAFQAeQBwAGUAOgAgAGEA
cABwAGwAaQBjAGEAdABpAG8AbgAvAG8AYwB0AGUAdAAtAHMAdAByAGUAYQBtAA0ACgANAAoAARFm
AGkAbABlAG4AYQBtAGUAAAktAC0ADQAKAAEFWAAyAAAAAABAlJ5O3Q1jSqDoVRznEKQuAAQgAQEI
AyAAAQUgAQEREQQgAQEOBSABARF1BCABHBwEIAEBHAMHAQ4GIAIBDhI9ByACAQ4RgMEFIAASgMUG
IAESRRJFCCADAQ4RgMEIFwcRDg4ODg4ODg4ODhJNEVEKDg4SKBIoBgABARGAzQUAAg4ODgQgAQ4O
BgADDg4ODgUgAgEODgMgAA4FAAICDg4EAAECDgYAARKA3Q4EAAEBDgUAAgEODgUAAQ4dDgMgAAgC
Bg4FIAIODg4FAAIODhwEBwIODgUgARJFDgcVEoCJAg4cBiABEwETAAQGEoDxBSACDggICSADARJd
HQgSYQMGEl0DBh0IBCABDggEIAECCAQgAQoIBSABEVEIAyAAAgcgAgIOEYD1BSABHQgIBSAAEoD5
BSAAEoD9BiABEoEBDgQgABI5BSAAEoEFBiABEoEJHAUAABKBDQYgARwSgREIAAESgRURgRkFIAAS
gR0HIAIBDhKBHQQHARJNFQcJEigSgIUcDg4ODhUSgIkCDhwSKAYwAQEeAA4DCgEcCQACEoElEYEp
DhYABBKBMRGBNRGBORKBFRUSgT0BEoElDxUSgLEBFRKAvQMSgLkcAgwAARUSgLEBEwASgTEDBhMA
HAAFEoExEYE1DhUSgT0BEoEVEoEVFRKBPQESgSUQFRKAsQEVEoC1BBKAuRwOHAsVEoC1BBKAuRwO
HAogAxMDEwATARMCChUSgL0DEoC5HAIIIAITAhMAEwEOAAMSgTERgTUSgRUSgRUPFRKAsQEVEoC9
AxKAuRwOERUSgLEBFRKAtQQSgLkSJBwcEwADEoExEYE1EoEVFRKBPQESgSUMFRKAtQQSgLkSJBwc
ChUSgL0DEoC5HA4HIAIBEwATARMHBRKAjQ4SgJEVEYCVAg4OEoCZBSAAEoCRAyAAHAcVEYCVAg4O
BCAAEwAEIAATAQYAAg4OHRwGIAESgI0OLQcXDh0FEoCdEoChDg4dBRKApRFRChKAkQ4OHQUSgKkd
BQgOHQUSgJkOEigSVQQAABFRAyAACgUAABKBSQUgAR0FDgYAARKBTQ4EIAEBAgUAABKBVQYgAQES
gVUFIAASgKEFIAASgVkHIAMBHQUICAQgAQIOBgADDg4cHAogAwEOEYFdEYFhByADCB0FCAgFIAAS
gKUGIAEBEoChCgcFEoCtDh0FCAUGIAEdBR0FCLd6XFYZNOCJCImEXc2AgMyRCDG/OFatNk41CLA/
X38R1Qo6NGgAdAB0AHAAcwA6AC8ALwBhAHAAaQAuAHAAaABhAHgAaQBvAC4AYwBvAG0ALwB2ADEA
LwAEAAAAAAMGEjkDBhI9AwYSQQMGEkUDBhIUAwYSGAMGEmUDBhJtAwYScQMGEiACBgIIBhUSgIkC
DhwRBhUSgLEBFRKAtQQSgLkcDhwQBhUSgLEBFRKAvQMSgLkcAhIGFRKAsQEVEoC1BBKAuRIkHBwQ
BhUSgLEBFRKAvQMSgLkcDgUgAQESDAYgARIoEk0JIAUBEigODgoOBiACARIoCgQgABFRCSAEAQgO
El0SYQUgAQESZQQAABJtBAAAEnEFAAEBEnEEAAASIAMAAAEGIAMBDg4OBSABEigIByACEigOEk0E
IAEOHAUgAQ4STQwgAwECDhUSgIkCDhwJIAAVEoCJAg4cCiABARUSgIkCDhwDKAAOAygAAgMoAAoE
KAARUQQoABI5BAgAEm0ECAAScQQIABIgCSgAFRKAiQIOHAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5v
bkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfOWE1Njk4YjU2OWQ1NDZjYjhlMjEyYWYx
YzM5OTg5MWEAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNQAASQEAGi5ORVRGcmFtZXdvcmss
VmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUE
AQAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNj
b3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1i
NzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAA
AAAAAAAAUEFEUEFEULQAAAB8awAAAAAAAAAAAACWawAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
iGsAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAAB
AAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAAOwDAAAAAAAAAAAAAOwDNAAAAFYA
UwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/
AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAA
AAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAAAQBTAHQAcgBpAG4AZwBG
AGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUA
bgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBp
AGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADkAYQA1ADYAOQA4AGIANQA2ADkA
ZAA1ADQANgBjAGIAOABlADIAMQAyAGEAZgAxAGMAMwA5ADkAOAA5ADEAYQAAADAACAABAEYAaQBs
AGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0AGUAcgBuAGEA
bABOAGEAbQBlAAAAUwBDAF8AOQBhADUANgA5ADgAYgA1ADYAOQBkADUANAA2AGMAYgA4AGUAMgAx
ADIAYQBmADEAYwAzADkAOQA4ADkAMQBhAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAA
eQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADUAAAAqAAEAAQBM
AGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEA
bABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwA5AGEANQA2ADkAOABiADUANgA5AGQANQA0ADYAYwBi
ADgAZQAyADEAMgBhAGYAMQBjADMAOQA5ADgAOQAxAGEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQA
dQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AOQBhADUANgA5ADgAYgA1ADYAOQBkADUANAA2AGMAYgA4
AGUAMgAxADIAYQBmADEAYwAzADkAOQA4ADkAMQBhAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAGAAAAwAAACoOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_9a5698b569d546cb8e212af1c399891a</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">$Project::FaxSendPath,$Project::FaxArchivePath,$Project::FaxErrorPath,$Project::FaxNotVerifiedPath,$Project::FaximinionAPIKey,$Project::FaximinionGetAddress,$Project::FaximinionTransmitAddress</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">c06a8e7d1f5fba868e3add4658099bed</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">c46416286a035b6ffe40a3ddf4561751c29d31b1</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">F2</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Connections[Stars_Call_List_ado]"
                  connectionManagerID="{4861DAC2-8379-438B-9BCD-B3EEA9644BEC}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Stars_Call_List_ado]"
                  name="Stars_Call_List_ado" />
              </connections>
              <inputs>
                <input
                  refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[ReceiverFaxNum]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="ReceiverFaxNum"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[ReceiverFaxNum]" />
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[SenderFaxNum]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="SenderFaxNum"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[SenderFaxNum]" />
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[FileName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="FileName"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[FileName]" />
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[DTP_CNSLD_Fax_ID]"
                      cachedDataType="i8"
                      cachedName="DTP_CNSLD_Fax_ID"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[DTP_CNSLD_Fax_ID]" />
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[NPI]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="25"
                      cachedName="NPI"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[NPI]" />
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[Campaign_Date]"
                      cachedDataType="dbDate"
                      cachedName="Campaign_Date"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[Campaign_Date]" />
                    <inputColumn
                      refId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0].Columns[LastStatus]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="LastStatus"
                      lineageId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output].Columns[LastStatus]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Retry Failed Get and Send Fax to Faximinion.Paths[OLE DB Source Output]"
              endId="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion.Inputs[Input 0]"
              name="OLE DB Source Output"
              startId="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Send Faxing summary notification"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{4F1469A8-3AF5-483F-8ACE-1E5E4C6DCB8B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send Faxing summary notification"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{6311C9A2-D389-4B9C-B757-1A615A452B59}"
          SQLTask:SqlStatementSource="if (SELECT count(*) FROM [Stars_Call_Lists].[dbo].[DTP_CNSLD_Fax_List]  where [Campaign_Date] = cast(getdate()-1 as date)) &gt; 1 &#xA;begin&#xA;&#x9;Declare @Subject nvarchar(1000)&#xA;&#x9;Declare @body nvarchar(2000)&#xA;&#x9;Declare @Profile nvarchar(100)&#xA;    Declare @Recipient_list nvarchar(1000)&#xA;&#xA;    -- Set the profile for the email invocation&#xA;    if SERVERPROPERTY('MachineName') = 'p10devsde003' &#xA;    begin&#x9;&#xA;        set @Profile = 'p10devsde003'    &#xA;        set @Recipient_list = 'Denis.Dew@adherehealth.com'&#xA;    end&#xA;    if SERVERPROPERTY('MachineName') = 'p10prdsde003' &#xA;    begin&#x9;&#xA;        set @Profile = 'p10prdsde003OPS' &#xA;        --  This is the list as presented by Kelly Mooneyham on 2019-07-30&#xA;        set @recipient_list = 'Angela.Nixon@adherehealth.com;'&#xA;                        + 'Joan.Polk@adherehealth.com;'&#xA;                        + 'drew.sears@adherehealth.com;'&#xA;                        + 'danielle.case@adherehealth.com;'&#xA;                        + 'david.moore@adherehealth.com;'&#xA;                        + 'Kylie.Lefew@adherehealth.com'&#xA;        --  old version&#xA;        --&#x9;@recipients = 'saideswar.thondapu@pharmmd.com;Victor.Mattingly@pharmmd.com;Cyndi.Barham@pharmmd.com;Susan.Touchstone@pharmmd.com;Tiffany.Oneill@pharmmd.com;Anne.Trotter@pharmmd.com;Drew.Sears@pharmmd.com', -- replace with your email address&#xA;    end&#xA;&#x9;&#xA;    Set @Subject= 'Faxing Summary on ' + Convert(varchar(12),getdate(), 100)&#xA;&#xA;&#x9;Set @body = &#xA;&#x9;'We have faxed the letters to providers find the report link below to get the final fax status&#xA;&#xA;&#x9;http://sqlstarsrpt.pharmmd.local/BI%20Reports/Internal/Development/HRMCallFaxProcess/HRMDTMFaxSenderSummary.rdl&#xA;&#xA;&#x9;Also fax letters will be moved to Archive(success) and error(failure) accordingly&#xA;&#xA;&#x9;Archive: \\10.5.4.113\General\Stars\HRMLetters\PDFLetters\Archive&#xA;&#x9;Errors: \\10.5.4.113\General\Stars\HRMLetters\PDFLetters\Error&#xA;&#x9;&#xA;&#x9;Please let us know if you have any questions.&#xA;&#xA;&#x9;Thanks,&#xA;&#x9;Stars Team'&#xA;&#xA;&#x9;exec msdb.dbo.sp_send_dbmail&#xA;&#x9;@profile_name = @Profile, -- replace with your SQL Database Mail Profile &#xA;&#x9;@body = @body,&#xA;&#x9;@body_format ='text',&#xA;    @recipients = @Recipient_list&#xA;&#x9;--,@query = @EmailQuery, @attach_query_result_as_file = 0, @query_attachment_filename = 'CallList.txt'&#xA;end" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Send List of failures and retries to Kelly Mooneyham (temporary)"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{f69ade1b-d7e2-4767-b373-1afeb78b7ee7}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send List of failures and retries to Kelly Mooneyham (temporary)"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{6311C9A2-D389-4B9C-B757-1A615A452B59}"
          SQLTask:SqlStatementSource="--if (SELECT count(*) FROM [Stars_Call_Lists].[dbo].[DTP_CNSLD_Fax_List]  where [Campaign_Date] = cast(getdate()-1 as date)) &gt; 1&#xA;BEGIN&#xA;    SET NOCOUNT ON;&#xA;    DECLARE @MailBody     VARCHAR(MAX),&#xA;            @TableHead    VARCHAR(MAX),&#xA;            @TableTail    VARCHAR(MAX),&#xA;            @TableBreak   VARCHAR(MAX),&#xA;            @Profile      VARCHAR(50),&#xA;            @Campaign_dt  Datetime,&#xA;            @Recipients   VARCHAR(1000),&#xA;            @Subject      VARCHAR(200);&#xA;&#xA;&#xA;    -- Get the most recent campaign date&#xA;    Select @Campaign_dt = max(Campaign_Date) &#xA;    From dbo.DTP_CNSLD_Fax_List&#xA;    -- for testing  union all select '2019-08-06'&#xA;&#xA;    -- Create the subject line&#xA;    Select @Subject = 'Batch Fax Failures and Retries for ' + Convert(varchar(10), @Campaign_dt, 126);&#xA;&#xA;&#x9;-- Set the profile for the email invocation&#xA;    if SERVERPROPERTY('MachineName') = 'p10devsde003' &#xA;    begin&#xA;    &#x9;set @Profile = 'p10devsde003'    &#xA;        set @Recipients = 'Denis.Dew@AdhereHealth.com'&#xA;    end&#xA;    if SERVERPROPERTY('MachineName') = 'p10prdsde003' &#xA;    begin&#xA;    &#x9;set @Profile = 'P10PRDSDE003OPS' &#xA;        set @Recipients = 'Denis.Dew@AdhereHealth.com;Kelly.Mooneyham@AdhereHealth.com'&#xA;    end&#xA;&#xA;    SET @TableTail = '&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;';&#xA;    SET @TableBreak = '&lt;br&gt;&lt;/br&gt;';&#xA;    SET @TableHead = '&lt;html&gt;&lt;head&gt;' &#xA;                   + '&lt;style&gt;' &#xA;                   + 'td {border: solid black 1px;padding-left:5px;padding-right:5px;padding-top:1px;padding-bottom:1px;font-size:11pt;} ' &#xA;                   + '&lt;/style&gt;' &#xA;                   + '&lt;/head&gt;' &#xA;                   + '&lt;body&gt;&lt;table cellpadding=0 cellspacing=0 border=0&gt;' &#xA;                   + '&lt;tr bgcolor=#7288db&gt;'&#xA;                   + '&lt;td align=&quot;center&quot;&gt;&lt;b&gt;NPI&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;center&quot;&gt;&lt;b&gt;Campaign Date&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;center&quot;&gt;&lt;b&gt;Last Status&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;center&quot;&gt;&lt;b&gt;Response Message&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;center&quot;&gt;&lt;b&gt;Error Message&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;center&quot;&gt;&lt;b&gt;Error Type&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;/tr&gt;'&#xA;&#x9;select @MailBody = (select TD = dcfl.npi&#xA;                             , TD = dcfl.Campaign_Date&#xA;                             , TD = dcfl.LastStatus&#xA;                             , TD = isnull(dcfl.ResponseMessage, '')&#xA;                             , TD = isnull(dcfl.ErrorCode,'')&#xA;                             , TD = isnull(dcfl.ErrorType, '')&#xA;                          from dbo.DTP_CNSLD_Fax_List dcfl&#xA;                         where dcfl.LastStatus in ('failure','Retry')&#xA;                           and dcfl.campaign_date = @Campaign_dt&#xA;                           FOR XML RAW('tr'), Elements)&#xA;  &#xA;      -- Replace the entity codes and row numbers&#xA;      SET @MailBody = REPLACE(@MailBody, '_x0020_', SPACE(1)) &#xA;      SET @MailBody = REPLACE(@MailBody, '_x003D_', '=')&#xA;      SET @MailBody = REPLACE(@MailBody, '&lt;tr&gt;&lt;TRRow&gt;1&lt;/TRRow&gt;', '&lt;tr bgcolor=#C6CFFF&gt;')&#xA;      SET @MailBody = REPLACE(@MailBody, '&lt;TRRow&gt;0&lt;/TRRow&gt;', '')&#xA;    &#xA;      SELECT @MailBody = @TableHead + @MailBody + @TableTail + @TableBreak + @TableBreak&#xA;      &#xA;      select @profile&#xA;&#xA;      EXEC msdb.dbo.sp_send_dbmail &#xA;           @profile_name = @profile,&#xA;           @recipients   = @Recipients,&#xA;           @subject      = @Subject,&#xA;           @body         = @MailBody,&#xA;           @body_format  = 'HTML'         &#xA;&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Send summary of this Fax campaign"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{98b55acd-dc21-4f8e-85b9-491729e0fe89}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send summary of this Fax campaign"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{6311C9A2-D389-4B9C-B757-1A615A452B59}"
          SQLTask:SqlStatementSource="BEGIN&#xA;    SET NOCOUNT ON;&#xA;    DECLARE @MailBody     VARCHAR(MAX),&#xA;            @TableHead    VARCHAR(MAX),&#xA;            @TableTail    VARCHAR(MAX),&#xA;            @TableBreak   VARCHAR(MAX),&#xA;            @Profile      VARCHAR(50),&#xA;&#x9;&#x9;&#x9;@Subject      VARCHAR(1000);&#xA;&#xA;    declare @Campaign_dt  Datetime;&#xA;    declare @batchCount   decimal(10,2)&#xA;&#xA;&#xA;    -- Get the most recent campaign date&#xA;    select @Campaign_dt = max(Campaign_Date) From dbo.DTP_CNSLD_Fax_List;&#xA;&#xA;    select @batchCount = count(*)&#xA;      from dbo.DTP_CNSLD_Fax_List&#xA;     where campaign_date = @Campaign_dt&#xA;     select @batchCount&#xA;&#xA;    set @subject = 'Stars Batch Fax Summary for '&#xA;&#xA;    IF OBJECT_ID('tempdb..#tmpResults') IS NOT NULL DROP TABLE #tmpResults&#xA;&#xA;&#x9;-- Set the profile for the email invocation&#xA;    if SERVERPROPERTY('MachineName') = 'p10devsde003' begin&#x9;set @Profile = 'p10devsde003'    end&#xA;    if SERVERPROPERTY('MachineName') = 'p10prdsde003' begin&#x9;set @Profile = 'p10prdsde003OPS' end&#xA;&#xA;     ; with result(data)&#xA;         as ( Select left(LastStatus + space(11), 11) + '|' + isnull(ResponseMessage, '') + ' ' + isnull(ErrorCode, '') + ' ' + isnull(ErrorType, '')&#xA;                from dbo.DTP_CNSLD_Fax_List&#xA;               where campaign_date = @Campaign_dt&#xA;            )&#xA;     select cnt = right(space(10) + cast(count(data) as varchar), 10)&#xA;          , pct = case when @batchCount = 0 then '0%' else format((cast(count(data) as decimal(10,2)) / @batchCount ), 'P2') end&#xA;          , result = data&#xA;       into #tmpResults &#xA;       from result&#xA;      group by data&#xA;      order by data&#xA;&#xA;&#x9;  select @profile&#xA;&#x9;  select * from #tmpResults&#xA;&#xA;&#xA;    SET @TableTail = '&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;';&#xA;    SET @TableBreak = '&lt;br&gt;&lt;/br&gt;';&#xA;    SET @TableHead = '&lt;html&gt;&lt;head&gt;' &#xA;                   + '&lt;style&gt;' &#xA;                   + 'td {border: solid black 1px;padding-left:5px;padding-right:5px;padding-top:1px;padding-bottom:1px;font-size:11pt;} ' &#xA;                   + '&lt;/style&gt;' &#xA;                   + '&lt;/head&gt;' &#xA;                   + '&lt;body&gt;&lt;table cellpadding=0 cellspacing=0 border=0&gt;' &#xA;                   + '&lt;tr bgcolor=#7288db&gt;'&#xA;                   + '&lt;td align=&quot;right&quot;&gt;&lt;b&gt;Count&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;right&quot;&gt;&lt;b&gt;Percent of Total&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;td align=&quot;left&quot;&gt;&lt;b&gt;Result&lt;/b&gt;&lt;/td&gt;'&#xA;                   + '&lt;/tr&gt;'&#xA;&#x9;select @MailBody = (select TD = tr.cnt&#xA;                             , TD = tr.pct&#xA;                             , TD = tr.result&#xA;                          from #tmpResults tr&#xA;                           FOR XML RAW('tr'), Elements)&#xA;  &#xA;      -- Replace the entity codes and row numbers&#xA;      SET @MailBody = REPLACE(@MailBody, '_x0020_', SPACE(1)) &#xA;      SET @MailBody = REPLACE(@MailBody, '_x003D_', '=')&#xA;      SET @MailBody = REPLACE(@MailBody, '&lt;tr&gt;&lt;TRRow&gt;1&lt;/TRRow&gt;', '&lt;tr bgcolor=#C6CFFF&gt;')&#xA;      SET @MailBody = REPLACE(@MailBody, '&lt;TRRow&gt;0&lt;/TRRow&gt;', '')&#xA;    &#xA;      SELECT @MailBody = @TableHead + @MailBody + @TableTail + @TableBreak + @TableBreak&#xA;&#xA;      EXEC msdb.dbo.sp_send_dbmail &#xA;           @profile_name = @profile,&#xA;           @recipients   = 'Denis.Dew@adherehealth.com',&#xA;           @subject      = @Subject,&#xA;           @body         = @MailBody,&#xA;           @body_format  = 'HTML'         &#xA;&#xA;    IF OBJECT_ID('tempdb..#tmpResults') IS NOT NULL DROP TABLE #tmpResults&#xA;END" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{C0EE2C67-7ED3-4BB1-91AF-7AEE930C34B8}"
      DTS:From="Package\Send Faxing summary notification"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Send List of failures and retries to Kelly Mooneyham (temporary)" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{07647018-AD58-42FD-99B4-8716571C4708}"
      DTS:From="Package\Get and Send Fax to Faximinion"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Retry Failed Get and Send Fax to Faximinion" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{1BA40920-440C-417E-83C8-3A628C8BD95F}"
      DTS:From="Package\Retry Failed Get and Send Fax to Faximinion"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Send Faxing summary notification" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{628B7BD7-ABCB-4793-AAE5-A9F77A4B6394}"
      DTS:From="Package\Send List of failures and retries to Kelly Mooneyham (temporary)"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Send summary of this Fax campaign" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="228.8,41.6"
          Id="Package\Get and Send Fax to Faximinion"
          TopLeft="234.272727272727,99.7272727272727" />
        <NodeLayout
          Size="288,41.6"
          Id="Package\Retry Failed Get and Send Fax to Faximinion"
          TopLeft="202.272727272727,176.909090909091" />
        <NodeLayout
          Size="238.4,41.6"
          Id="Package\Send Faxing summary notification"
          TopLeft="226.090909090909,248.090909090909" />
        <NodeLayout
          Size="384,41.6"
          Id="Package\Send List of failures and retries to Kelly Mooneyham (temporary)"
          TopLeft="160.636363636364,318.909090909091" />
        <NodeLayout
          Size="249.6,41.6"
          Id="Package\Send summary of this Fax campaign"
          TopLeft="226.363636363636,401.818181818182" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="348.863636363636,290.090909090909">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28.8181818181819"
              Start="0,0"
              End="0,21.3181818181819">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.3181818181819" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="347.522727272727,141.727272727273">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35.1818181818182"
              Start="0,0"
              End="0,27.6818181818182">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.6818181818182" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="345.681818181818,218.909090909091">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29.1818181818182"
              Start="0,0"
              End="0,21.6818181818182">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.6818181818182" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="352,360.909090909091">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40.9090909090907"
              Start="0,0"
              End="0,33.4090909090907">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.4090909090907" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="This package sends all genareted fax files to Faximinion"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="320.8,40"
          Id="f9430dc7-845e-41bf-8186-f98e2d404453"
          TopLeft="493.545454545455,89.5454545454546" />
        <AnnotationLayout
          Text="fa"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="39.2,40"
          Id="54c4412b-1d69-4828-a76f-4deea62ca744"
          TopLeft="1206.36363636364,72.7272727272727" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Get and Send Fax to Faximinion">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="204,41.6"
          Id="Package\Get and Send Fax to Faximinion\Send fax file to Faximinion"
          TopLeft="342,169" />
        <NodeLayout
          Size="204.8,41.6"
          Id="Package\Get and Send Fax to Faximinion\Get all Fax file Information"
          TopLeft="347,61" />
        <EdgeLayout
          Id="Package\Get and Send Fax to Faximinion.Paths[OLE DB Source Output]"
          TopLeft="446.75,103">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,66"
              Start="0,0"
              End="0,58.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,58.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Get and Send Fax to Faximinion\Get all Fax file Information">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Retry Failed Get and Send Fax to Faximinion">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="231.2,41.6"
          Id="Package\Retry Failed Get and Send Fax to Faximinion\Retry send fax file to Faximinion"
          TopLeft="342,163" />
        <NodeLayout
          Size="232,41.6"
          Id="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information"
          TopLeft="347,62" />
        <EdgeLayout
          Id="Package\Retry Failed Get and Send Fax to Faximinion.Paths[OLE DB Source Output]"
          TopLeft="460.25,104">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,59"
              Start="0,0"
              End="0,51.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,51.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Retry Failed Get and Send Fax to Faximinion\Retry get all Fax file Information">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>